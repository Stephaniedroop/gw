# save Food, Path and Situation as factors
pChoice <- pChoice |>
mutate(Food = factor(Food, levels=c("Pizza", "Hotdog")),
Path = factor(Path, levels=c("Short", "Long")),
fullSituation = factor(fullSituation, levels=unique(fullSituation)))
str(pChoice)
# save pChoice
save(pChoice, file=here('Exp2Explanation', 'Model', 'Data', 'pChoice.rda'))
i
# save pChoice
save(pChoice, file=here('Exp2Explanation', 'Model', 'Data', 'pChoice.rda'))
library(here)
library(tidyverse)
load(here('Exp2Explanation', 'Model', 'Data', 'pChoice.rda'))
View(pChoice)
# Import causal models from Exp1
load(here('Exp1Prediction', 'Model', 'Data', 'model.rda'))
active_food
best_food_params
# So are we understanding K & Ku needs to be on to get the path Effect? It is not determinative so enumerate all 0 and 1 combos of each
# So we need to get all combinations of 0 and 1 for the u-vars in each model
u_vars_path <- paste0(names(active_path), "u")
u_vars_food <- paste0(names(active_food), "u")
n_u_path <- length(u_vars_path)
n_u_food <- length(u_vars_food)
# Get all combinations of 0 and 1 for n_u_path and n_u_food
u_combos_path <- as.data.frame(expand.grid(replicate(n_u_path, c
(0, 1), simplify = FALSE)))
View(u_combos_path)
colnames(u_combos_path) <- u_vars_path
u_combos_path <- u_combos_path %>%
mutate(combo_id = row_number())
u_combos_food <- as.data.frame(expand.grid(replicate(n_u_food, c(0, 1), simplify = FALSE)))
colnames(u_combos_food) <- u_vars_food
u_combos_food <- u_combos_food |>
mutate(combo_id = row_number())
# Now we need to combine these with pChoice, so that for each situation we have all combinations of u-vars for both models
# First combine pChoice with u_combos_path
pChoice_path <- merge(pChoice, u_combos_path, by=NULL)
# Separately combine pChoice with u_combos_food
pChoice_food <- merge(pChoice, u_combos_food, by=NULL)
View(pChoice_food)
View(pChoice_path)
64*4
View(pChoice_food)
# Now we need to combine these with pChoice, so that for each situation we have all combinations of u-vars for both models
# First combine pChoice with u_combos_path
pChoice_path <- merge(pChoice, u_combos_path) # 256: 64 x 2^2, of 13 vars
View(pChoice_path)
# Separately combine pChoice with u_combos_food
pChoice_food <- merge(pChoice, u_combos_food) # 1024: 64 x 2^4, of 15 vars because 4 model vars instead of path's two
# Now attach the values from active_path and active_food to these dataframes, with the corresponding values when the u-var is 1, and 1-value when the u-var is 0
for (i in 1:n_u_path) {
var <- u_vars_path[i]
param <- active_path[names(active_path) == sub("u$", "", var)]
pChoice_path[[var]] <- ifelse(pChoice_path[[var]] == 1, param, 1 - param)
}
for (i in 1:n_u_food) {
var <- u_vars_food[i]
param <- active_food[names(active_food) == sub("u$", "", var)]
pChoice_food[[var]] <- ifelse(pChoice_food[[var]] == 1, param, 1 - param)
}
View(pChoice_path)
View(u_combos_food)
View(u_combos_path)
View(u_combos_food)
pChoice_path <- pChoice_path |>
rename_with(~ paste0(., "_path"), all_of(u_vars_path))
pChoice_food <- pChoice_food |>
rename_with(~ paste0(., "_food"), all_of(u_vars_food))
View(u_combos_path)
# Now we need to combine these with pChoice, so that for each situation we have all combinations of u-vars for both models
# First combine pChoice with u_combos_path
pChoice_path <- merge(pChoice, u_combos_path) # 256: 64 x 2^2, of 13 vars
# Now attach the values from active_path and active_food to these dataframes, without replacing
# with the corresponding values when the u-var is 1, and 1-value when the u-var is 0
# Add a new column for each u-var, with the corresponding param value from active_path
for (i in 1:n_u_path) {
var <- u_vars_path[i]
new_var <- paste0(var, "_var")
pChoice_path[[new_var]] <- NA
param <- active_path[names(active_path) == sub("u$", "", var)]
pChoice_path[[new_var]] <- ifelse(pChoice_path[[var]] == 1, param, 1 - param)
}
View(pChoice_path)
for (i in 1:n_u_food) {
var <- u_vars_food[i]
new_var <- paste0(var, "_var")
pChoice_food[[new_var]] <- NA
param <- active_food[names(active_food) == sub("u$", "", var)]
pChoice_food[[new_var]] <- ifelse(pChoice_food[[var]] == 1, param, 1 - param)
}
View(pChoice_food)
# Separately combine pChoice with u_combos_food
pChoice_food <- merge(pChoice, u_combos_food) # 1024: 64 x 2^4, of 15 vars because 4 model vars instead of path's two
for (i in 1:n_u_food) {
var <- u_vars_food[i]
new_var <- paste0(var, "_var")
pChoice_food[[new_var]] <- NA
param <- active_food[names(active_food) == sub("u$", "", var)]
pChoice_food[[new_var]] <- ifelse(pChoice_food[[var]] == 1, param, 1 - param)
}
View(pChoice_food)
View(pChoice)
View(u_combos_path)
View(pChoice)
pChoice_path <- pChoice |>
select(situationVerbose, situation, Path, p_short, p_long)
pChoice_path <- unique(pChoice_path) # 32 rows, one for each situation x path combination
pChoice_path <- merge(pChoice_path, u_combos_path)
View(pChoice_path)
pChoice_food <- pChoice |>
select(situationVerbose, situation, Food, p_pizza, p_hotdog)
pChoice_food <- unique(pChoice_food) # 64 obs of 5
pChoice_food <- merge(pChoice_food, u_combos_food) # 256 obs of
# --------- Moving on -----------
# Now attach the values from active_path and active_food to these dataframes, without replacing
# with the corresponding values when the u-var is 1, and 1-value when the u-var is 0
# Add a new column for each u-var, with the corresponding param value from active_path
for (i in 1:n_u_path) {
var <- u_vars_path[i]
new_var <- paste0(var, "_var")
# pChoice_path[[new_var]] <- NA
# OR!
pChoice_path[[new_var]] <- rep(NA, nrow(pChoice_path))
param <- active_path[names(active_path) == sub("u$", "", var)]
pChoice_path[[new_var]] <- ifelse(pChoice_path[[var]] == 1, param, 1 - param)
}
for (i in 1:n_u_food) {
var <- u_vars_food[i]
new_var <- paste0(var, "_var")
# pChoice_food[[new_var]] <- NA
pChoice_food[[new_var]] <- rep(NA, nrow(pChoice_food))
param <- active_food[names(active_food) == sub("u$", "", var)]
pChoice_food[[new_var]] <- ifelse(pChoice_food[[var]] == 1, param, 1 - param)
}
View(pChoice_food)
active_path
# Add names from active_path to pChoice_path with param of .5 for each
for (i in 1:length(active_path)) {
var <- names(active_path)[i]
if (!(var %in% colnames(pChoice_path))) {
pChoice_path[[var]] <- rep(0.5, nrow(pChoice_path))
}
}
# Add names from active_food to pChoice_food with param of .5 for each
for (i in 1:length(active_food)) {
var <- names(active_food)[i]
if (!(var %in% colnames(pChoice_food))) {
pChoice_food[[var]] <- rep(0.5, nrow(pChoice_food))
}
}
str(pChoice_path$Path)
# get product of Ku_var:KS
pChoice_path$Pr <- apply(pChoice_path[, grep("_var$", names(pChoice_path))], 1, prod)
View(pChoice_path)
pChoice_path$Pr <- apply(pChoice_path[, 9:12], 1, prod)
# he other variables not in the causal model also need to be included with a value of 0.5
# So we need to add columns for P, C, PC, S, PS, CS
# with a value of 0.5 for each row
for (var in c("P", "C", "PC", "S", "PS", "CS")) {
if (!(var %in% colnames(pChoice_path))) {
pChoice_path[[var]] <- rep(0.5, nrow(pChoice_path))
}
}
# But they need to add to 1 eventually
pChoice_path$Pr <- pChoice_path$Pr * apply(pChoice_path[, c("P", "C", "PC", "S", "PS", "CS")], 1, prod)
sum(pChoice_path$Pr)
pChoice_path$Pr <- apply(pChoice_path[, 9:12], 1, prod)
sum(pChoice_path$Pr)
# Also divide by 1/16 because there are 16 worlds with equal prior probs
pChoice_path$Pr <- pChoice_path$Pr * (1/16)
# AND also multiple by the p_short or p_long depending on Path
pChoice_path$Pr <- pChoice_path |>
ifelse(Path == "Short", p_short*Pr, p_long*Pr))
# AND also multiple by the p_short or p_long depending on Path
pChoice_path$Pr <- pChoice_path |>
ifelse(Path == "Short", p_short*Pr, p_long*Pr)
# AND also multiple by the p_short or p_long depending on Path
pChoice_path$PathP <- pChoice_path |>
ifelse(Path == "Short", p_short, p_long)
# AND also multiple by the p_short or p_long depending on Path
pChoice_path$Pr <- pChoice_path$Pr * ifelse(pChoice_path$Path == "Short", pChoice_path$p_short, pChoice_path$p_long)
sum(Pchoice_path$Pr) # 1
sum(pChoice_path$Pr) # 1
pChoice_path <- pChoice |>
select(situationVerbose, situation, Path, p_short, p_long)
pChoice_path <- unique(pChoice_path) # 32 obs of 5
pChoice_path <- merge(pChoice_path, u_combos_path) # 128 obs of 8
# --------- Moving on -----------
# Now attach the values from active_path and active_food to these dataframes, without replacing
# with the corresponding values when the u-var is 1, and 1-value when the u-var is 0
# Add a new column for each u-var, with the corresponding param value from active_path
for (i in 1:n_u_path) {
var <- u_vars_path[i]
new_var <- paste0(var, "_var")
# pChoice_path[[new_var]] <- NA
# OR!
pChoice_path[[new_var]] <- rep(NA, nrow(pChoice_path))
param <- active_path[names(active_path) == sub("u$", "", var)]
pChoice_path[[new_var]] <- ifelse(pChoice_path[[var]] == 1, param, 1 - param)
}
# Add names from active_path to pChoice_path with param of .5 for each
for (i in 1:length(active_path)) {
var <- names(active_path)[i]
if (!(var %in% colnames(pChoice_path))) {
pChoice_path[[var]] <- rep(0.5, nrow(pChoice_path))
}
}
# get product of the cols with _var in the names
pChoice_path$Pr <- apply(pChoice_path[, grepl("_var$", colnames(pChoice_path))], 1, prod)
#pChoice_path$Pr <- apply(pChoice_path[, 9:10], 1, prod) # Gets it to 8
# Also divide by 1/16 because there are 16 worlds with equal prior probs
pChoice_path$Pr <- pChoice_path$Pr * (1/16)
# AND also multiple by the p_short or p_long depending on Path
pChoice_path$Pr <- pChoice_path$Pr * ifelse(pChoice_path$Path == "Short", pChoice_path$p_short, pChoice_path$p_long)
sum(pChoice_path$Pr) # 1
pChoice_food$Pr <- apply(pChoice_food[, grepl("_var$", colnames(pChoice_food))], 1, prod)
pChoice_food$Pr <- pChoice_food$Pr * (1/16)
pChoice_food$Pr <- pChoice_food$Pr * ifelse(pChoice_food$Food == "Pizza", pChoice_food$p_pizza, pChoice_food$p_hotdog)
sum(pChoice_food$Pr)
# We need to group by the observed vars and the outcome var - Path or Food - then get posterior
# Group by situation, Path, combo_id
path_post <- pChoice_path |>
group_by(situationVerbose, situation, Path, combo_id) |>
summarise(Pr = sum(Pr)) |>
ungroup()
View(path_post)
# We need to group by the observed vars and the outcome var - Path or Food - then get posterior
# Group by situation, Path, combo_id
path_post <- pChoice_path |>
group_by(situationVerbose, situation, Path, combo_id) |>
mutate(posterior = Pr/sum(Pr)) |>
ungroup()
# We need to group by the observed vars and the outcome var - Path or Food - then get posterior
# Group by situation, Path, combo_id
path_post <- pChoice_path |>
group_by(situationVerbose, situation, Path) |>
mutate(posterior = Pr/sum(Pr)) |>
ungroup()
# We need to group by the observed vars and the outcome var - Path or Food - then get posterior
# Group by situation, Path, combo_id
path_post <- pChoice_path |>
group_by(situation, Path) |>
mutate(posterior = Pr/sum(Pr)) |>
ungroup()
# get product of the cols with _var in the names for PrUn, the prior of the unobserved vars
pChoice_path$PrUn <- apply(pChoice_path[, grepl("_var$", colnames(pChoice_path))], 1, prod)
# Also divide by 1/16 for the overall Prior because there are 16 worlds with equal prior probs - the other vars like K and KS are wrapped into this
pChoice_path$Pr <- pChoice_path$PrUn * (1/16)
# AND also multiple by the p_short or p_long depending on Path
pChoice_path$Pr <- pChoice_path$Pr * ifelse(pChoice_path$Path == "Short", pChoice_path$p_short, pChoice_path$p_long)
# Do same for FOOD
pChoice_food$PrUn <- apply(pChoice_food[, grepl("_var$", colnames(pChoice_food))], 1, prod)
pChoice_food$Pr <- pChoice_food$PrUn * (1/16)
pChoice_food$Pr <- pChoice_food$Pr * ifelse(pChoice_food$Food == "Pizza", pChoice_food$p_pizza, pChoice_food$p_hotdog)
# We need to group by the observed vars and the outcome var - Path or Food - then get posterior
# Group by situation, Path, combo_id
path_post <- pChoice_path |>
group_by(situation, Path) |>
mutate(posterior = PrUn/sum(PrUn)) |>
ungroup()
View(path_post)
# get product of the cols with _var in the names for PrUn, the prior of the unobserved vars
pChoice_path$PrUn <- apply(pChoice_path[, grepl("_var$", colnames(pChoice_path))], 1, prod)
# AND also multiple by the p_short or p_long depending on Path
pChoice_path$PrUn <- pChoice_path$PrUn * ifelse(pChoice_path$Path == "Short", pChoice_path$p_short, pChoice_path$p_long)
# We need to group by the observed vars and the outcome var - Path or Food - then get posterior
# Group by situation, Path, combo_id
path_post <- pChoice_path |>
group_by(situation, Path) |>
mutate(posterior = PrUn/sum(PrUn)) |>
ungroup()
# We need to group by the observed vars and the outcome var - Path or Food - then get posterior
# Group by situation, Path, combo_id
path_post <- pChoice_path |>
group_by(situation) |>
mutate(posterior = PrUn/sum(PrUn)) |>
ungroup()
# Check it sums to 1 in each situation and u vars
check <- path_post |>
group_by(situation, combo_id) |>
summarise(total = sum(posterior))
View(check)
# Check it sums to 1 in each situation and u vars
check <- path_post |>
group_by(situation) |>
summarise(total = sum(posterior))
View(check)
# Do same for FOOD
pChoice_food$PrUn <- apply(pChoice_food[, grepl("_var$", colnames(pChoice_food))], 1, prod)
pChoice_food$Pr <- pChoice_food$PrUn * (1/16)
pChoice_food$PrUn <- pChoice_food$PrUn * ifelse(pChoice_food$Food == "Pizza", pChoice_food$p_pizza, pChoice_food$p_hotdog)
# FOOD
food_post <- pChoice_food |>
group_by(situation) |>
mutate(posterior = PrUn/sum(PrUn)) |>
ungroup()
# Check it sums to 1 in each situation
check_food <- food_post |>
group_by(situation) |>
summarise(total = sum(posterior))
View(check_food)
save(path_post, food_post, file=here('Exp2Explanation', 'Model', 'Data', 'posteriors.rda'))
active_food
params_food <- data.frame(
'0' = 1 - active_food,
'1' = active_food,
row.names = names(active_food)
)
View(params_food)
# Create expanded params_food
expanded_food <- rbind(
data.frame('0' = 0.5, '1' = 0.5, row.names = names(active_food)),
data.frame('0' = 1 - active_food, '1' = active_food, row.names = paste0(names(active_food), "u"))
)
View(params_food)
# Create expanded params_path
expanded_path <- rbind(
data.frame('0' = 0.5, '1' = 0.5, row.names = names(active_path)),
data.frame('0' = 1 - active_path, '1' = active_path, row.names = paste0(names(active_path), "u"))
)
# Create expanded params_food
expanded_food <- rbind(
data.frame('0' = 0.5, '1' = 0.5, row.names = names(active_food)),
data.frame('0' = 1 - active_food, '1' = active_food, row.names = paste0(names(active_food), "u"))
)
expand <- data.frame('0' = 0.5, '1' = 0.5, row.names = names(active_food))
names(active_food)
expand <- data.frame(
'0' = 0.5,
'1' = 0.5,
row.names = names(active_food)
)
params_food <- data.frame(
'0' = 1 - active_food,
'1' = active_food,
row.names = names(active_food)
)
View(params_food)
g <- 0.5
expand <- data.frame(
'0' = g,
'1' = 1-g,
row.names = names(active_food)
)
expand <- data.frame(
'0' = c(0.5,0.5,0.5,0.5),
'1' = c(0.5,0.5,0.5,0.5),
row.names = names(active_food)
)
View(expand)
# Create expanded params_food
expanded_food <- rbind(
data.frame('0' = c(0.5,0.5,0.5,0.5), '1' = c(0.5,0.5,0.5,0.5), row.names = names(active_food)),
data.frame('0' = 1 - active_food, '1' = active_food, row.names = paste0(names(active_food), "u"))
)
View(expanded_food)
# Rename columns to be actuall 0 and 1
colnames(expanded_food) <- c('0', '1')
View(expanded_food)
# Create expanded params_path
expanded_path <- rbind(
data.frame('0' = c(0.5,0.5,0.5,0.5), '1' = c(0.5,0.5,0.5,0.5), row.names = names(active_path)),
data.frame('0' = 1 - active_path, '1' = active_path, row.names = paste0(names(active_path), "u"))
)
# Create expanded params_path
expanded_path <- rbind(
data.frame('0' = c(0.5,0.5), '1' = c(0.5,0.5), row.names = names(active_path)),
data.frame('0' = 1 - active_path, '1' = active_path, row.names = paste0(names(active_path), "u"))
)
View(expanded_path)
# Create expanded params_path
params_path <- rbind(
data.frame('0' = c(0.5,0.5), '1' = c(0.5,0.5), row.names = names(active_path)),
data.frame('0' = 1 - active_path, '1' = active_path, row.names = paste0(names(active_path), "u"))
)
# Create expanded params_food
params_food <- rbind(
data.frame('0' = c(0.5,0.5,0.5,0.5), '1' = c(0.5,0.5,0.5,0.5), row.names = names(active_food)),
data.frame('0' = 1 - active_food, '1' = active_food, row.names = paste0(names(active_food), "u"))
)
# Rename columns to be actuall 0 and 1
colnames(params_path) <- c('0', '1')
library(here)
library(tidyverse)
load(here('Exp2Explanation', 'Model', 'Data', 'pChoice.rda'))
View(pChoice)
load(here('Exp2Explanation', 'Model', 'Data', 'posteriors.rda')) # from getPosts.R
View(food_post)
# Create expanded params_path
params_path <- rbind(
data.frame('0' = c(0.5,0.5), '1' = c(0.5,0.5), row.names = names(active_path)),
data.frame('0' = 1 - active_path, '1' = active_path, row.names = paste0(names(active_path), "u"))
)
# Import causal models from Exp1
load(here('Exp1Prediction', 'Model', 'Data', 'model.rda'))
# Create expanded params_path
params_path <- rbind(
data.frame('0' = c(0.5,0.5), '1' = c(0.5,0.5), row.names = names(active_path)),
data.frame('0' = 1 - active_path, '1' = active_path, row.names = paste0(names(active_path), "u"))
)
# Rename columns to be actually 0 and 1
colnames(params_path) <- c('0', '1')
# Create expanded params_food
params_food <- rbind(
data.frame('0' = c(0.5,0.5,0.5,0.5), '1' = c(0.5,0.5,0.5,0.5), row.names = names(active_food)),
data.frame('0' = 1 - active_food, '1' = active_food, row.names = paste0(names(active_food), "u"))
)
# Rename columns to be actually 0 and 1
colnames(expanded_food) <- c('0', '1')
View(params_food)
# Rename columns to be actually 0 and 1
colnames(params_food) <- c('0', '1')
View(params_food)
View(params_path)
22^10
2^10
2^13
View(food_post)
View(food_post)
# Rename rownames of just KS and KSu as KS_p and KSu_p
rownames(params_path)[rownames(params_path) %in% c("KS", "KSu")] <- c("KS_p", "KSu_p")
View(params_path)
# Rename rownames of just KS and KSu as KS_f and KSu_f
rownames(params_food)[rownames(params_food) %in% c("KS", "KSu")] <- c("KS_f", "KSu_f")
View(params_food)
best_path_params
# Add a row called 'br', where its value for 1 is the br value from best_path_params, and the value for 0 is 1- that
params_path <- rbind(params_path, data.frame('0' = 1 - best_path_params['br'], '1' = best_path_params['br'], row.names = 'br'))
params_path <- rbind(
data.frame('0' = c(0.5,0.5), '1' = c(0.5,0.5), row.names = names(active_path)),
data.frame('0' = 1 - active_path, '1' = active_path, row.names = paste0(names(active_path), "u"))
)
# Rename rownames of just KS and KSu as KS_p and KSu_p
rownames(params_path)[rownames(params_path) %in% c("KS", "KSu")] <- c("KS_p", "KSu_p")
# Add a row called 'br', where its value for 1 is the br value from best_path_params, and the value for 0 is 1- that
params_path <- rbind(params_path, data.frame('0' = 1 - best_path_params['br'], '1' = best_path_params['br'], row.names = 'br'))
# Rename columns to be actually 0 and 1
colnames(params_path) <- c('0', '1')
View(params_path)
params_path <- rbind(
data.frame('0' = c(0.5,0.5), '1' = c(0.5,0.5), row.names = names(active_path)),
data.frame('0' = 1 - active_path, '1' = active_path, row.names = paste0(names(active_path), "u"))
)
# Rename rownames of just KS and KSu as KS_p and KSu_p
rownames(params_path)[rownames(params_path) %in% c("KS", "KSu")] <- c("KS_p", "KSu_p")
# Add a row called 'br', where its value for 1 is the br value from best_path_params, and the value for 0 is 1- that
params_path <- rbind(params_path,
data.frame(
'0' = 1 - best_path_params['br'],
'1' = best_path_params['br'],
row.names = 'br'))
# Rename columns to be actually 0 and 1
colnames(params_path) <- c('0', '1')
View(params_path)
# Create expanded params_food
params_food <- rbind(
data.frame('0' = c(0.5,0.5,0.5,0.5), '1' = c(0.5,0.5,0.5,0.5), row.names = names(active_food)),
data.frame('0' = 1 - active_food, '1' = active_food, row.names = paste0(names(active_food), "u"))
)
# Rename rownames of just KS and KSu as KS_f and KSu_f
rownames(params_food)[rownames(params_food) %in% c("KS", "KSu")] <- c("KS_f", "KSu_f")
# Add a row called 'br', where its value for 1 is the br value from best_path_params, and the value for 0 is 1- that
params_food <- rbind(params_food,
data.frame(
'0' = 1 - best_food_params['br'],
'1' = best_food_params['br'],
row.names = 'br'))
# Rename columns to be actually 0 and 1
colnames(params_food) <- c('0', '1')
View(params_food)
best_food_params
# Now store union of params_path and params_food
all_params <- params_path[union(rownames(params_path), rownames(params_food)), ]
View(all_params)
# Now store union of params_path and params_food
all_params <- rbind(params_path, params_food)
View(all_params)
# Create expanded params_path
params_path <- rbind(
data.frame('0' = c(0.5,0.5), '1' = c(0.5,0.5), row.names = names(active_path)),
data.frame('0' = 1 - active_path, '1' = active_path, row.names = paste0(names(active_path), "u"))
)
# Rename rownames of just KS and KSu as KS_p and KSu_p
rownames(params_path)[rownames(params_path) %in% c("KS", "KSu")] <- c("KS_p", "KSu_p")
# Add a row called 'br', where its value for 1 is the br value from best_path_params, and the value for 0 is 1- that
params_path <- rbind(params_path,
data.frame(
'0' = 1 - best_path_params['br'],
'1' = best_path_params['br'],
row.names = 'br_p'))
# Rename columns to be actually 0 and 1
colnames(params_path) <- c('0', '1')
# Create expanded params_food
params_food <- rbind(
data.frame('0' = c(0.5,0.5,0.5,0.5), '1' = c(0.5,0.5,0.5,0.5), row.names = names(active_food)),
data.frame('0' = 1 - active_food, '1' = active_food, row.names = paste0(names(active_food), "u"))
)
# Rename rownames of just KS and KSu as KS_f and KSu_f
rownames(params_food)[rownames(params_food) %in% c("KS", "KSu")] <- c("KS_f", "KSu_f")
# Add a row called 'br', where its value for 1 is the br value from best_path_params, and the value for 0 is 1- that
params_food <- rbind(params_food,
data.frame(
'0' = 1 - best_food_params['br'],
'1' = best_food_params['br'],
row.names = 'br_f'))
# Rename columns to be actually 0 and 1
colnames(params_food) <- c('0', '1')
# Now store union of params_path and params_food
all_params <- rbind(params_path, params_food)
View(all_params)
