plogp <- function(p) {
# bits, not nats
if(p==0) 0 else p*log2(p) # Consider why we can't just use p*log2(p). Because log 0 = inf
}
cat_entropy <- function(catv) {
-sum(sapply(catv,plogp))
}
require(combinat) # From googling "all list permutations in R"
probs <- c(0,.2,.3,.75)
hyps <- permn(probs) # Generates all permutations, where order doesn't matter it is 4x3x2x1
prior <- rep(1/24) # Entropy if we know nothing is 0.19
cat_entropy(prior)
update_probs <- function(prior,choice,outcome) {
# x, below, is a list of probabilities under a specific hypothesis
#Likelihood function is a zero for all hypotheses incompatible with the outcome
#and 1 otherwise
likelihood <- function(this_hyp,this_choice,this_outcome) {
if (this_outcome==this_choice){
likelihood[this_hyp] <- 1
} else {
likelihood <- 0
}
}
likes <- sapply(hyps,function(h) {likelihood(h,choice,outcome)})
unnp <- likes*prior
z <- sum(unnp)
unnp/z
}
post <- update_probs(prior,choice=1,outcome=0)
print(post)
update_probs <- function(prior,choice,outcome) {
# x, below, is a list of probabilities under a specific hypothesis
#Likelihood function is a zero for all hypotheses incompatible with the outcome
#and 1 otherwise
likelihood <- function(this_hyp,this_choice,this_outcome) {
prob_this_outcome <- (this_hyp[this_choice]*this_outcome) + (1-this_hyp[this_choice]*(1-this_outcome))
}
likes <- sapply(hyps,function(h) {likelihood(h,choice,outcome)})
unnp <- likes*prior
z <- sum(unnp)
unnp/z
}
post <- update_probs(prior,choice=1,outcome=0)
print(post)
cat_entropy(post)
log(24)
log2(24)
# First we want the probability of each outcome in each hyp
# Then we take the weighted sum over hypothesis probabilities
expected_outcome <- function(i,ph) {
sum(hyps[i])*ph
}
print(expected_outcome(2,post))
# First we want the probability of each outcome in each hyp
# Then we take the weighted sum over hypothesis probabilities
expected_outcome <- function(i,ph) {
sum(sapply(hyps, function(hyp) {hyp[i]})*ph) # the sapply results in a vector of 24. sapply loops over column and applies a function to each element
}
print(expected_outcome(2,post))
expected_entropy <- function(choice,p_hyps) {
pwin <- expected_outcome(choice,p_hyps)
cat_entropy(pwin)
}
print(expected_entropy(2,post))
#For steph 2
library(igraph)
library(tidyverse)
nodes<-c('Preference','Character','Closer','Knowledge','Visible','Choice')
graph<-matrix(c(0,0,0,0,0,1,
0,0,0,0,0,1,
0,0,0,0,0,1,
0,0,0,0,0,1,
0,0,0,0,0,1,
0,0,0,0,0,0), ncol = 6, byrow=T)
G<-graph.adjacency(graph)
View(G)
V(G)$label<-V(G)$name<-nodes
V(G)$size <- 50
V(G)$color <- 'white'
E(G)$color <- 'black'
E(G)$width <- 2
plot(G)
?igraph
V(G)$color <- 'blue'
E(G)$color <- 'black'
E(G)$width <- 2
plot(G)
V(G)$color <- 'white'
E(G)$color <- 'red'
E(G)$width <- 2
plot(G)
#I figured its easier to think about in the form of a data frame
#So we have a column indexing the state for each cause using a factor (0,1)
#And a column for the probabilities for each unique combination
pChoice<-data.frame(expand.grid(list(Preference=c(0,1),
Character=c(0,1),
Closer=c(0,1),
Knowledge=c(0,1),
Visible = c(0,1)))) %>%
mutate(Preference = factor(Preference, levels = c(0,1),
labels = c('Absent','Hotdog')),
Character = factor(Character, levels = c(0,1),
labels = c('Lazy','Sporty')),
Closer = factor(Closer, levels = c(0,1),
labels = c('Pizza','Hotdog')),
Knowledge = factor(Knowledge, levels = c(0,1),
labels = c('No','Yes')),
Visible = factor(Visible, levels = c(0,1),
labels = c('Pizza','Hotdog')),
p_choose_hotdog = NA)
View(pChoice)
head(pChoice)
#Default preference for hotdog
baserate<-.5
#Strength of preference, strength of character
strengths<-list(preference=.5, character=.5)
#preference and character match only promote hotdog choice so long as the person either
#(a) knows the area or (b) can see the hotdog
tmp1<- pChoice$Knowledge=='Yes' | pChoice$Visible=='Hotdog'
#character match only promotes pizza choice so long as the person
#(a) knows the area or (b) can see the hotdog
tmp2<-pChoice$Knowledge=='Yes' | pChoice$Visible=='Pizza'
pChoice$p_choose_hotdog<-(1-(1-baserate) *
(1-strengths[['preference']]*as.numeric(pChoice$Preference=='Hotdog')*tmp1) *
#preference for hotdog pushes toward hotdog
(1-strengths[['character']]* as.numeric(pChoice$Character=='Lazy' & pChoice$Closer=='Hotdog' |
#character match to distance to hotdog pushes toward hotdog
pChoice$Character=='Sporty' & pChoice$Closer=='Pizza')*tmp1)) *
#end of the noisy OR of generative causes
(1-strengths[['character']] * as.numeric(pChoice$Character=='Lazy' & pChoice$Closer=='Pizza' |
#character match to distance to pizza pushes toward pizza
pChoice$Character=='Sporty' & pChoice$Closer=='Hotdog') * tmp2)
View(pChoice)
#Here's how it looks
pChoice
#Anc here's an example of using it to maker a basic counterfactual explanation type model
#Let's suppose a person chooses pizza in situation 15
case<-cbind(pChoice[15,], Choice='Pizza')
case
#Was it reasonably to be expected given the situation (in this case yes)
p_actual<-1-case$p_choose_hotdog
?unlist
#What features of the situation contributed most to its being selected?
#counterfactual contrasts:
p_counterfactual<-1-unlist(c(pChoice %>% filter(Preference!=case$Preference,
Character==case$Character,
Closer ==case$Closer,
Knowledge==case$Knowledge,
Visible==case$Visible) %>% select(preference=p_choose_hotdog),
pChoice %>% filter(Preference==case$Preference,
Character!=case$Character,
Closer ==case$Closer,
Knowledge==case$Knowledge,
Visible==case$Visible) %>% select(character=p_choose_hotdog),
pChoice %>% filter(Preference==case$Preference,
Character==case$Character,
Closer !=case$Closer,
Knowledge==case$Knowledge,
Visible==case$Visible) %>% select(closer=p_choose_hotdog),
pChoice %>% filter(Preference==case$Preference,
Character==case$Character,
Closer ==case$Closer,
Knowledge!=case$Knowledge,
Visible==case$Visible) %>% select(knowledge=p_choose_hotdog),
pChoice %>% filter(Preference==case$Preference,
Character==case$Character,
Closer ==case$Closer,
Knowledge==case$Knowledge,
Visible!=case$Visible) %>% select(visible=p_choose_hotdog)))
View(case)
dependence<-p_actual-p_counterfactual
#In this case we might reasonably blame her lazy character or the fact that the pizza was closer
Collapse
View(case)
View(pChoice)
dependence
# My meddling
hotdog_promotion <- function(char, pref, baserate) {
pref_prom_hotdog <- 1 - pref * pref_match_hotdog * prom_hotdog
char_prom_hotdog <- 1 - char * char_match_hotdog * prom_hotdog
noisyOR <- 1-(1-baserate)
hotdog_score <- noisyOR * pref_push * char_push
pizza_score <- 1-char*char_match_pizza * prom_pizza
p_choose_hotdog <- hotdog_score * pizza_score
return (p_choose_hotdog)
}
pChoice$prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(0.5,0.5,0.5))
pref_match_hotdog <- as.numeric(pChoice$Preference=='Hotdog')
char_match_hotdog <- as.numeric(pChoice$Character=='Lazy' & pChoice$Closer=='Hotdog' |
pChoice$Character=='Sporty' & pChoice$Closer=='Pizza')
char_match_pizza <- as.numeric(pChoice$Character=='Lazy' & pChoice$Closer=='Pizza' |
#character match to distance to pizza pushes toward pizza
pChoice$Character=='Sporty' & pChoice$Closer=='Hotdog')
pChoice$prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(0.5,0.5,0.5))
#preference and character match only promote hotdog choice so long as the person either
#(a) knows the area or (b) can see the hotdog ie generative ie things that make you want hotdog
prom_hotdog <- pChoice$Knowledge=='Yes' | pChoice$Visible=='Hotdog'
#character match only promotes pizza choice so long as the person
#(a) knows the area or (b) can see the hotdog ie preventative factor ie things that amke you want pizza
prom_pizza <- pChoice$Knowledge=='Yes' | pChoice$Visible=='Pizza'
# My meddling
hotdog_promotion <- function(char, pref, baserate) {
pref_prom_hotdog <- 1 - pref * pref_match_hotdog * prom_hotdog
char_prom_hotdog <- 1 - char * char_match_hotdog * prom_hotdog
noisyOR <- 1-(1-baserate)
hotdog_score <- noisyOR * pref_push * char_push
pizza_score <- 1-char*char_match_pizza * prom_pizza
p_choose_hotdog <- hotdog_score * pizza_score
return (p_choose_hotdog)
}
pChoice$prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(0.5,0.5,0.5))
# My meddling
hotdog_promotion <- function(char, pref, baserate) {
pref_prom_hotdog <- 1 - pref * pref_match_hotdog * prom_hotdog
char_prom_hotdog <- 1 - char * char_match_hotdog * prom_hotdog
noisyOR <- 1-(1-baserate)
hotdog_score <- noisyOR * pref_prom_hotdog * char_prom_hotdog
pizza_score <- 1-char*char_match_pizza * prom_pizza
p_choose_hotdog <- hotdog_score * pizza_score
return (p_choose_hotdog)
}
pChoice$prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(0.5,0.5,0.5))
pChoice$prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(strengths[['character']], strengths[['preference']], baserate))
pChoice$prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(c(strengths[['character']], strengths[['preference']], baserate))
prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(c(strengths[['character']], strengths[['preference']], baserate))
prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(c(strengths[['character']], strengths[['preference']], baserate)))
# My meddling
hotdog_promotion <- function() {
pref_prom_hotdog <- 1 - strengths[['preference']] * pref_match_hotdog * prom_hotdog
char_prom_hotdog <- 1 - strengths[['character']] * char_match_hotdog * prom_hotdog
noisyOR <- 1-(1-baserate)
hotdog_score <- noisyOR * pref_prom_hotdog * char_prom_hotdog
pizza_score <- 1-char*char_match_pizza * prom_pizza
p_choose_hotdog <- hotdog_score * pizza_score
return (p_choose_hotdog)
}
prob_choose_hotdog <- sapply(pChoice, hotdog_promotion())
# My meddling
hotdog_promotion <- function() {
pref_prom_hotdog <- 1 - strengths[['preference']] * pref_match_hotdog * prom_hotdog
char_prom_hotdog <- 1 - strengths[['character']] * char_match_hotdog * prom_hotdog
noisyOR <- 1-(1-baserate)
hotdog_score <- noisyOR * pref_prom_hotdog * char_prom_hotdog
pizza_score <- 1- strengths[['character']] *char_match_pizza * prom_pizza
p_choose_hotdog <- hotdog_score * pizza_score
return (p_choose_hotdog)
}
prob_choose_hotdog <- sapply(pChoice, hotdog_promotion())
22/110
2.002/10.10
5.005/10.01
2.005/10.1
2.002/10.1
52/110
exp(100)
exp(1)
runif(4)
sessionInfo()
sessionInfo()
sessionInfo()
install.packages("afex")
install.packages("faux")
library(broom, tidyverse, faux, afex)
library(broom)
library(faux)
library(afex)
R.version()
R.Version()
.libPaths()
.libPaths()
R.Version()
# ------- Prelims -----------
library(tidyverse)
library(ggplot2)
# ----------- Define an example prior df -------------------------
# Here define two causal vars and an exogenous noise variable for each (i.e. var epsilon A goes with A)
# in the exp setting this is 0.5
p_A <- c(.1,.9) # ie A usually has value 1... base rate for cause
p_epsA <- c(.7,.3) #... most of the time the noise var for a doesn't occur. for a to work it needs a and exp a. a is usually present but ogten doesnt work cos of noise term not working
p_B <- c(.8,.2) # B rarely fires 1...
p_epsB <- c(.3,.7) # but when it does it is strong
# And wrap them into a df called prior. Later the function should take dfs of this format:
# i.e. any number of causes as the rows, and the probs of them taking 0 and 1 as cols
params <- data.frame(rbind(p_A, p_epsA, p_B, p_epsB))
colnames(params) <- c(0,1)
# Other values set outside for now
N_cf <- 1000L # How many counterfactual samples to draw
s <- .7 # Stability
n_causes <- nrow(params)
causes <- rownames(params)
# Make a df of all combinations of variable settings
df <- expand.grid(rep(list(c(0,1)),n_causes), KEEP.OUT.ATTRS = F)
# ... with variables as the column names
colnames(df) <- causes
worlds <- nrow(df)
View(df)
structure <- 'disjunctive'
if (structure=="disjunctive") {
df$E <- as.numeric((df[1] & df[2]) | (df[3] & df[4]))
}
# Can replace with this - if rename - it is deterministic - literally gives specific outcome for set 3 causes, needs actual input. mechanical tell syou whether effects occurred given setting
# df$effect <- max( c(min(c1,e1), min(c2,e2), min(c3, e3), min(c2*c3, e23))) # BUT SAME PROBLEM - HOW TO AUTOMATICALLY DEAL WITH ANY NUMBER OF CAUSES?
mat <- as.matrix(df[,1:4])
View(mat)
# df2 <- as.matrix(df, dimnames=NULL)
# dimnames = list(c(1:16), c(causes))
# Replace every cell with the relevant indexed edge strength from params
for (k in 1:worlds){
for (cause in causes) {
a <- params[cause,df[k,cause]+1] # It needs the '+1' because r indexes from 1 not 0
mat[k,cause] <- a # ((then sometimes #*df[k,cause] if do at same time as structure but change later if need))
}
}
View(mat)
View(params)
# For each row of df, the prior is now the product of the same row of df2
df$Pr <- apply(mat, 1, prod) # parameter of the model
sum(df$Pr)
# Then loop to calculate cfs and assign causal responsibility
# Loop through possible world settings
for (c_ix in 1:worlds)
# Setwd
setwd("/Users/stephaniedroop/Documents/Gridworld/collider/pilotdata")
# read in csvs
csvList <- lapply(list.files("./"), read.csv, stringsAsFactors = F)
# bind them
dataset <- do.call(rbind, csvList) #
View(dataset)
# Get ppt data
dataset <- dataset %>% select(-2:4,6,7)
library(tidyverse)
# Get ppt data
dataset <- dataset %>% select(-2:4,6,7)
# read in csvs
csvList <- lapply(list.files("./"), read.csv, stringsAsFactors = F)
# bind them
dataset <- do.call(rbind, csvList) #
# Get ppt data
dataset <- dataset %>% select(-2:4,6,7)
# read in csvs
csvList <- lapply(list.files("./"), read.csv, stringsAsFactors = F)
# bind them
dataset <- do.call(rbind, csvList) #
# Get ppt data
dataset <- dataset %>% select(-c(2:4,6,7))
df1 <- dataset %>% fill(answer, .direction = 'up')
View(df1)
# bind them
dataset <- do.call(rbind, csvList) %>% na_if("")
dataset <-  dataset %>% na_if("")
# Get ppt data
dataset <- dataset %>% select(-c(2:4,6,7)) %>% na_if("")
dataset <- dataset %>% mutate(across(c('answer'), ~na_if("")))
dataset <- dataset %>% mutate(across(c('answer'), ~na_if(.,"")))
df1 <- dataset %>% fill(answer, .direction = 'up')
# Remove empty cols
df1 <- df1 %>% select(-c(13:14))
df1 <- df1 %>% filter(cb!=NA)
# Then can fill upwards to get the text answer in the same place as the trial info
df1 <- dataset %>% fill(answer, .direction = 'up')
# Remove empty cols and rows
df1 <- df1 %>% select(-c(13:14))
df1 <- df1 %>% filter(cb!='NA')
# Now save as data
write.csv(df1, file="processed_collider.csv")
# Now save as data
write.csv(df1, file="../processed_collider.csv")
View(df1)
df1 <- df1 %>% mutate(probgroup = if_else((prob0=='10%' & prob1=='50%') | (prob2=='10%' & prob3=='50%'), group2,
if_else((prob0=='50' & prob1=='80%') | (prob2=='50%' & prob3=='80%'), group1,
group11)))
df1 <- df1 %>% mutate(probgroup = if_else((prob0=='10%' & prob1=='50%') | (prob2=='10%' & prob3=='50%'), 2, other))
df1 <- df1 %>% mutate(probgroup = if_else((prob0=='10%' & prob1=='50%') | (prob2=='10%' & prob3=='50%'), 2, 'other'))
df1 <- df1 %>% mutate(probgroup = if_else((prob0=='10%' & prob1=='50%') | (prob2=='10%' & prob3=='50%')), '2', 'other')
df1 <- df1 %>% mutate(probgroup = if_else(prob0=='10%' & prob1=='50%' | prob2=='10%' & prob3=='50%', '2', 'other'))
View(df1)
df1 <- df1 %>% mutate(probgroup = if_else(prob0=='10%' & prob1=='50%' | prob2=='10%' & prob3=='50%', '2',
if_else(prob0=='50%' & prob1=='80%' | prob2=='50%' & prob3=='80%', '1', '11')))
View(df1)
df1 %>% group_by(probgroup) %>% summarise(n=n())
df1 %>% group_by(cb) %>% summarise(n=n())
df1 %>% group_by(cb, prob0, prob1, prob2, prob3) %>% summarise(n=n())
# Now save as data
write.csv(df1, file="../processed_collider.csv")
# Setwd
setwd("/Users/stephaniedroop/Documents/GitHub/gw/Collider/pilot_data")
# read in csvs
csvList <- lapply(list.files("./"), read.csv, stringsAsFactors = F)
# bind them
dataset <- do.call(rbind, csvList)
# Remove long strings for study id etc. Go back if you need them later
dataset <- dataset %>% select(-c(2:4,6,7))
# Data rows were generated by different trials, but we can get everything we need in one row
# But first we need to replace spaces with NA
dataset <- dataset %>% mutate(across(c('answer'), ~na_if(.,"")))
# Then can fill upwards to get the text answer in the same place as the trial info
df1 <- dataset %>% fill(answer, .direction = 'up')
# Remove empty cols and rows
df1 <- df1 %>% select(-c(13:14))
df1 <- df1 %>% filter(cb!='NA') # Obs should be 12* no. of ppts, as each did 12 trials
df1 <- df1 %>% mutate(probgroup = if_else(prob0=='10%' & prob1=='50%' | prob2=='10%' & prob3=='50%', '2',
if_else(prob0=='50%' & prob1=='80%' | prob2=='50%' & prob3=='80%', '1', '11')))
probgroups_summary <- df1 %>% group_by(cb, prob0, prob1, prob2, prob3) %>% summarise(n=n())
View(probgroups_summary)
# Now save as data
write.csv(df1, file="../processed_collider.csv")
rm(list=ls())
# Setwd
setwd("/Users/stephaniedroop/Documents/GitHub/gw/Collider")
# Get model preds
load('model_data/collider1.rdata', verbose = T)
View(mp1c)
View(mp1c)
View(mp1d)
load('model_data/unobsforplot.rdata', verbose = T)
load('model_data/unobsforplot1.rdata', verbose = T)
View(forplotd)
# Setwd
setwd("/Users/stephaniedroop/Documents/GitHub/gw/Collider/pilot_data")
# read in csvs
csvList <- lapply(list.files("./"), read.csv, stringsAsFactors = F)
# bind them
dataset <- do.call(rbind, csvList)
# Remove long strings for study id etc. Go back if you need them later
dataset <- dataset %>% select(-c(2:4,6,7))
# Data rows were generated by different trials, but we can get everything we need in one row
# But first we need to replace spaces with NA
dataset <- dataset %>% mutate(across(c('answer'), ~na_if(.,"")))
# Then can fill upwards to get the text answer in the same place as the trial info
df1 <- dataset %>% fill(answer, .direction = 'up')
# Remove empty cols and rows
df1 <- df1 %>% select(-c(13:14))
df1 <- df1 %>% filter(cb!='NA') # Obs should be 12* no. of ppts, as each did 12 trials
# REMEMBER TO TURN ROUND THE CB ONES where cb==0 probs are 1,2,3,4 but cb==1 are 3,4,1,2
# IF WE DECIDE WE NEED IT - WE MIGHT NOT ACTUALLY - DEPENDS HOW TO COMPARE AGAINST PROBS
df1 <- df1 %>% mutate(probgroup = if_else(prob0=='10%' & prob1=='50%' | prob2=='10%' & prob3=='50%', '2',
if_else(prob0=='50%' & prob1=='80%' | prob2=='50%' & prob3=='80%', '1', '11')))
answers <- ['The candidate had skill A',
answers <- c('The candidate had skill A',
'The candidate did not have skill A',
'The candidate demonstrated skill A',
'The candidate did not demonstrate skill A',
'The candidate had skill B',
'The candidate did not have skill B',
'The candidate demonstrated skill B',
'The candidate did not demonstrate skill B')
answers[1]
View(df1)
View(df1)
match(df1$answer, answers)
jobanswers <- c('The candidate had skill A',
'The candidate did not have skill A',
'The candidate demonstrated skill A',
'The candidate did not demonstrate skill A',
'The candidate had skill B',
'The candidate did not have skill B',
'The candidate demonstrated skill B',
'The candidate did not demonstrate skill B')
cookanswers <- c('The chef completed the main dish',
'The chef did not complete the main dish',
'The main dish impressed the panel',
'The main dish did not impress the panel',
'The chef completed the dessert',
'The chef did not complete the dessert',
'The dessert impressed the panel',
'The dessert did not impress the panel')
groupanswers <- c('The lecturer attended',
'The lecturer did not attend',
'The lecturer talked about the paper',
'The lecturer did not talk about the paper',
'The postdoc attended',
'The postdoc did not attend',
'The postdoc talked about the paper',
'The postdoc did not talk about the paper')
df1 <- df1 %>% mutate(ans = if_else(scenario=='job', match(df1$answer, jobanswers),
if_else(scenario=='cook', match(df1$answer, cookanswers),
match(df1$answer, groupanswers))))
match(df1$answer, answers)
df1 %>% group_by(trialtype, ans) %>% summarise(n=n())
ansies <- df1 %>% group_by(trialtype, ans) %>% summarise(n=n())
View(ansies)
write.csv(ansies, 'ansies.csv')
probgroups_summary <- df1 %>% group_by(cb, prob0, prob1, prob2, prob3) %>% summarise(n=n())
View(probgroups_summary)
setwd("/Users/stephaniedroop/Documents/GitHub/gw/Collider")
source('general_cesm_a.R') # relative file of file 1
my_df<-data.frame(x=rep(NA, 10))
View(params)
View(params)
View(params)
View(params)
class(params)
row.names(params)
params1<-data.frame("0"=c(0.9,0,0.1,0), "1"=c(0.1,1,0.9,1))
params
params1
params1<-data.frame("0"=c(0.9,0,0.1,0), "1"=c(0.1,1,0.9,1))
params2<-data.frame("0"=c(0.9,0,0.1,0), "1"=c(0.1,1,0.9,1))
params3<-data.frame("0"=c(0.9,0,0.1,0), "1"=c(0.1,1,0.9,1))
row.names(params1)<-row.names(params2)<-row.names(params3)<-c("pA",  "peA", "pB", "peB")
colNames(params1)<-colNames(params2)<-colNames(params3)<-c('0','1')
names(params1)<-names(params2)<-names(params3)<-c('0','1')
params1
install.packages("rjson")
library(rjson)
# This part may be cropped out elsewhere depending how we end up using the data from the js experiment
worlds <- fromJSON(file = 'worlds.json')
worldsdf <- as.data.frame(worlds)
View(worldsdf)
conds <- fromJSON(file = 'conds.json')
condsdf <- as.data.frame(conds)
View(condsdf)
