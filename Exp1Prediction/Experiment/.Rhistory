p_short_hotdog = lik_short_hotdog/lik_sum,
p_long_hotdog = lik_long_hotdog/lik_sum,
p_long = p_long_pizza + p_long_hotdog,
p_hotdog = p_short_hotdog + p_long_hotdog)
# df<-cbind(df, df.preprocessed[,10:13])
head(df)
df<-df %>% select(-X, -situTag) %>% mutate(Preference = factor(Preference, levels = c('Absent','Hot dogs'), labels = c('Absent','Hotdog')),
Knowledge = factor(Knowledge, levels = c('No','Yes')),
Character = factor(Character, levels = c('Lazy','Sporty')),
Start = factor(Start, levels = c('Pizza visible','Hot dogs visible'), labels = c('See_pizza','See_hotdog')),
P = factor(Preference, levels = c('Absent','Hotdog'), labels = 0:1),
K = factor(Knowledge, levels = c('No','Yes'), labels = 0:1),
C = factor(Character, levels = c('Lazy','Sporty'), labels = 0:1),
S = factor(Start, levels = c('See_pizza','See_hotdog'), labels = 0:1),
SituationVerbose = paste0(Preference, Knowledge,Character, Start),
Situation = paste0(P,K,C,S),
mindsCode = factor(mindsCode, levels = unique(mindsCode)),
id = factor(mindsCode, levels = unique(mindsCode), labels = 1:length(unique(mindsCode)))) %>% arrange(id, S,C,K,P)
rm(list = ls())
library(stringi)
library(data.table)
library(tidyverse)
# Read in data downloaded as long from testable
pizpar <- read.csv("params_data_Jan23.csv") # 1456 obs of 41 vars
# Choose only active rows
pizpar <-  pizpar %>% filter(mindsCode!="") # 1440 obs of 41 vars = 90 ppts
# Reverse response columns for group 2
pizpar <- pizpar %>%
mutate(flipped = if_else(subjectGroup=='2', stri_reverse(responseCode), responseCode))
# Copy just in case
pizpar$flipped2 <- pizpar$flipped
# Split out the response column and remove delimiter |
# These names are needed due to the different starting points of the agents, different food was visible
# Later we can know which relates to which by eg. `if_else Start=='hotdog"`
pizpar <- separate(data = pizpar, col = flipped2, into = c("short_inv", "long_inv", "short_vis", "long_vis"), sep = "\\|")
# The convention of eg. 'short path to visible food' was used for this part of the project, self contained. Was then abandoned.
pizpar$short_vis <- as.numeric(pizpar$short_vis)
pizpar$long_vis <- as.numeric(pizpar$long_vis)
pizpar$short_inv <- as.numeric(pizpar$short_inv)
pizpar$long_inv <- as.numeric(pizpar$long_inv)
# pizpar$row_sum <- rowSums(pizpar[ , c(43:46)])
#
# # Normalise these 4 columns into probabilities
# pizpar$short_vis_norm <- pizpar$short_vis/pizpar$row_sum
# pizpar$long_vis_norm <- pizpar$long_vis/pizpar$row_sum
# pizpar$short_inv_norm <- pizpar$short_inv/pizpar$row_sum
# pizpar$long_inv_norm <- pizpar$long_inv/pizpar$row_sum
# New smaller df with columns we need
pizpar2 <- pizpar %>% select(mindsCode, subjectGroup, stim1, rowNo, note1, short_vis, long_vis, short_inv, long_inv)
# Set columns for what the condition tags actually mean
pizpar2 <- pizpar2 %>% mutate(Preference = if_else(grepl("F", note1), 'Hot dogs', 'Absent'))
pizpar2 <- pizpar2 %>% mutate(Knowledge = if_else(grepl("K", note1), 'Knows area', 'Does not know area'))
pizpar2 <- pizpar2 %>% mutate(Character = if_else(grepl("L", note1), 'Lazy', 'Sporty'))
pizpar2 <- pizpar2 %>% mutate(Start = if_else(grepl("A", stim1), 'Hot dogs visible', 'Pizza visible'))
df <- pizpar2
# Recode things and make the order of everything as consistent as possible
df <- df %>%
mutate( lik_short_pizza = if_else(Start=="Hot dogs visible",
short_inv, short_vis),
lik_long_pizza = if_else(Start=="Hot dogs visible",
long_inv, long_vis),
lik_short_hotdog = if_else(Start=="Hot dogs visible",
short_vis, short_inv),
lik_long_hotdog = if_else(Start=="Hot dogs visible",
long_vis, long_inv)) %>%
select(-short_vis, -long_vis, -short_inv, -long_inv)
df<-df %>% mutate(lik_sum = lik_short_pizza + lik_long_pizza + lik_short_hotdog + lik_long_hotdog,
p_short_pizza = lik_short_pizza/lik_sum,
p_long_pizza = lik_long_pizza/lik_sum,
p_short_hotdog = lik_short_hotdog/lik_sum,
p_long_hotdog = lik_long_hotdog/lik_sum,
p_long = p_long_pizza + p_long_hotdog,
p_hotdog = p_short_hotdog + p_long_hotdog)
# df<-cbind(df, df.preprocessed[,10:13])
head(df)
df<-df %>% select(-situTag) %>% mutate(Preference = factor(Preference, levels = c('Absent','Hot dogs'), labels = c('Absent','Hotdog')),
Knowledge = factor(Knowledge, levels = c('No','Yes')),
Character = factor(Character, levels = c('Lazy','Sporty')),
Start = factor(Start, levels = c('Pizza visible','Hot dogs visible'), labels = c('See_pizza','See_hotdog')),
P = factor(Preference, levels = c('Absent','Hotdog'), labels = 0:1),
K = factor(Knowledge, levels = c('No','Yes'), labels = 0:1),
C = factor(Character, levels = c('Lazy','Sporty'), labels = 0:1),
S = factor(Start, levels = c('See_pizza','See_hotdog'), labels = 0:1),
SituationVerbose = paste0(Preference, Knowledge,Character, Start),
Situation = paste0(P,K,C,S),
mindsCode = factor(mindsCode, levels = unique(mindsCode)),
id = factor(mindsCode, levels = unique(mindsCode), labels = 1:length(unique(mindsCode)))) %>% arrange(id, S,C,K,P)
View(pizpar2)
rm(list = ls())
library(stringi)
library(data.table)
library(tidyverse)
# Read in data downloaded as long from testable
pizpar <- read.csv("params_data_Jan23.csv") # 1456 obs of 41 vars
# Choose only active rows
pizpar <-  pizpar %>% filter(mindsCode!="") # 1440 obs of 41 vars = 90 ppts
# Reverse response columns for group 2
pizpar <- pizpar %>%
mutate(flipped = if_else(subjectGroup=='2', stri_reverse(responseCode), responseCode))
# Copy just in case
pizpar$flipped2 <- pizpar$flipped
# Split out the response column and remove delimiter |
# These names are needed due to the different starting points of the agents, different food was visible
# Later we can know which relates to which by eg. `if_else Start=='hotdog"`
pizpar <- separate(data = pizpar, col = flipped2, into = c("short_inv", "long_inv", "short_vis", "long_vis"), sep = "\\|")
# The convention of eg. 'short path to visible food' was used for this part of the project, self contained. Was then abandoned.
pizpar$short_vis <- as.numeric(pizpar$short_vis)
pizpar$long_vis <- as.numeric(pizpar$long_vis)
pizpar$short_inv <- as.numeric(pizpar$short_inv)
pizpar$long_inv <- as.numeric(pizpar$long_inv)
# pizpar$row_sum <- rowSums(pizpar[ , c(43:46)])
#
# # Normalise these 4 columns into probabilities
# pizpar$short_vis_norm <- pizpar$short_vis/pizpar$row_sum
# pizpar$long_vis_norm <- pizpar$long_vis/pizpar$row_sum
# pizpar$short_inv_norm <- pizpar$short_inv/pizpar$row_sum
# pizpar$long_inv_norm <- pizpar$long_inv/pizpar$row_sum
# New smaller df with columns we need
pizpar2 <- pizpar %>% select(mindsCode, subjectGroup, stim1, rowNo, note1, short_vis, long_vis, short_inv, long_inv)
# Set columns for what the condition tags actually mean
pizpar2 <- pizpar2 %>% mutate(Preference = if_else(grepl("F", note1), 'Hot dogs', 'Absent'))
pizpar2 <- pizpar2 %>% mutate(Knowledge = if_else(grepl("K", note1), 'Knows area', 'Does not know area'))
pizpar2 <- pizpar2 %>% mutate(Character = if_else(grepl("L", note1), 'Lazy', 'Sporty'))
pizpar2 <- pizpar2 %>% mutate(Start = if_else(grepl("A", stim1), 'Hot dogs visible', 'Pizza visible'))
df <- pizpar2
# Recode things and make the order of everything as consistent as possible
df <- df %>%
mutate( lik_short_pizza = if_else(Start=="Hot dogs visible",
short_inv, short_vis),
lik_long_pizza = if_else(Start=="Hot dogs visible",
long_inv, long_vis),
lik_short_hotdog = if_else(Start=="Hot dogs visible",
short_vis, short_inv),
lik_long_hotdog = if_else(Start=="Hot dogs visible",
long_vis, long_inv)) %>%
select(-short_vis, -long_vis, -short_inv, -long_inv)
df<-df %>% mutate(lik_sum = lik_short_pizza + lik_long_pizza + lik_short_hotdog + lik_long_hotdog,
p_short_pizza = lik_short_pizza/lik_sum,
p_long_pizza = lik_long_pizza/lik_sum,
p_short_hotdog = lik_short_hotdog/lik_sum,
p_long_hotdog = lik_long_hotdog/lik_sum,
p_long = p_long_pizza + p_long_hotdog,
p_hotdog = p_short_hotdog + p_long_hotdog)
# df<-cbind(df, df.preprocessed[,10:13])
head(df)
df<-df %>% mutate(Preference = factor(Preference, levels = c('Absent','Hot dogs'), labels = c('Absent','Hotdog')),
Knowledge = factor(Knowledge, levels = c('No','Yes')),
Character = factor(Character, levels = c('Lazy','Sporty')),
Start = factor(Start, levels = c('Pizza visible','Hot dogs visible'), labels = c('See_pizza','See_hotdog')),
P = factor(Preference, levels = c('Absent','Hotdog'), labels = 0:1),
K = factor(Knowledge, levels = c('No','Yes'), labels = 0:1),
C = factor(Character, levels = c('Lazy','Sporty'), labels = 0:1),
S = factor(Start, levels = c('See_pizza','See_hotdog'), labels = 0:1),
SituationVerbose = paste0(Preference, Knowledge,Character, Start),
Situation = paste0(P,K,C,S),
mindsCode = factor(mindsCode, levels = unique(mindsCode)),
id = factor(mindsCode, levels = unique(mindsCode), labels = 1:length(unique(mindsCode)))) %>% arrange(id, S,C,K,P)
df<-df %>% mutate(SituationVerbose = factor(SituationVerbose, levels = SituationVerbose[1:16]),
Situation = factor(Situation, levels = Situation[1:16]))
rm(list = ls())
library(stringi)
library(data.table)
library(tidyverse)
# Read in data downloaded as long from testable
pizpar <- read.csv("params_data_Jan23.csv") # 1456 obs of 41 vars
# Choose only active rows
pizpar <-  pizpar %>% filter(mindsCode!="") # 1440 obs of 41 vars = 90 ppts
# Reverse response columns for group 2
pizpar <- pizpar %>%
mutate(flipped = if_else(subjectGroup=='2', stri_reverse(responseCode), responseCode))
# Copy just in case
pizpar$flipped2 <- pizpar$flipped
# Split out the response column and remove delimiter |
# These names are needed due to the different starting points of the agents, different food was visible
# Later we can know which relates to which by eg. `if_else Start=='hotdog"`
pizpar <- separate(data = pizpar, col = flipped2, into = c("short_inv", "long_inv", "short_vis", "long_vis"), sep = "\\|")
# The convention of eg. 'short path to visible food' was used for this part of the project, self contained. Was then abandoned.
pizpar$short_vis <- as.numeric(pizpar$short_vis)
pizpar$long_vis <- as.numeric(pizpar$long_vis)
pizpar$short_inv <- as.numeric(pizpar$short_inv)
pizpar$long_inv <- as.numeric(pizpar$long_inv)
# pizpar$row_sum <- rowSums(pizpar[ , c(43:46)])
#
# # Normalise these 4 columns into probabilities
# pizpar$short_vis_norm <- pizpar$short_vis/pizpar$row_sum
# pizpar$long_vis_norm <- pizpar$long_vis/pizpar$row_sum
# pizpar$short_inv_norm <- pizpar$short_inv/pizpar$row_sum
# pizpar$long_inv_norm <- pizpar$long_inv/pizpar$row_sum
# New smaller df with columns we need
pizpar2 <- pizpar %>% select(mindsCode, subjectGroup, stim1, rowNo, note1, short_vis, long_vis, short_inv, long_inv)
# Set columns for what the condition tags actually mean
pizpar2 <- pizpar2 %>% mutate(Preference = if_else(grepl("F", note1), 'Hot dogs', 'Absent'))
pizpar2 <- pizpar2 %>% mutate(Knowledge = if_else(grepl("K", note1), 'Knows area', 'Does not know area'))
pizpar2 <- pizpar2 %>% mutate(Character = if_else(grepl("L", note1), 'Lazy', 'Sporty'))
pizpar2 <- pizpar2 %>% mutate(Start = if_else(grepl("A", stim1), 'Hot dogs visible', 'Pizza visible'))
df <- pizpar2
# Recode things and make the order of everything as consistent as possible
df <- df %>%
mutate( lik_short_pizza = if_else(Start=="Hot dogs visible",
short_inv, short_vis),
lik_long_pizza = if_else(Start=="Hot dogs visible",
long_inv, long_vis),
lik_short_hotdog = if_else(Start=="Hot dogs visible",
short_vis, short_inv),
lik_long_hotdog = if_else(Start=="Hot dogs visible",
long_vis, long_inv)) %>%
select(-short_vis, -long_vis, -short_inv, -long_inv)
df<-df %>% mutate(lik_sum = lik_short_pizza + lik_long_pizza + lik_short_hotdog + lik_long_hotdog,
p_short_pizza = lik_short_pizza/lik_sum,
p_long_pizza = lik_long_pizza/lik_sum,
p_short_hotdog = lik_short_hotdog/lik_sum,
p_long_hotdog = lik_long_hotdog/lik_sum,
p_long = p_long_pizza + p_long_hotdog,
p_hotdog = p_short_hotdog + p_long_hotdog)
# df<-cbind(df, df.preprocessed[,10:13])
head(df)
df<-df %>% mutate(Preference = factor(Preference, levels = c('Absent','Hot dogs'), labels = c('Absent','Hotdog')),
Knowledge = factor(Knowledge, levels = c('No','Yes')),
Character = factor(Character, levels = c('Lazy','Sporty')),
Start = factor(Start, levels = c('Pizza visible','Hot dogs visible'), labels = c('See_pizza','See_hotdog')),
P = factor(Preference, levels = c('Absent','Hotdog'), labels = 0:1),
K = factor(Knowledge, levels = c('No','Yes'), labels = 0:1),
C = factor(Character, levels = c('Lazy','Sporty'), labels = 0:1),
S = factor(Start, levels = c('See_pizza','See_hotdog'), labels = 0:1),
SituationVerbose = paste0(Preference, Knowledge,Character, Start),
Situation = paste0(P,K,C,S),
mindsCode = factor(mindsCode, levels = unique(mindsCode)),
id = factor(mindsCode, levels = unique(mindsCode), labels = 1:length(unique(mindsCode)))) %>% arrange(id, S,C,K,P)
df<-df %>% SituationVerbose = factor(SituationVerbose, levels = SituationVerbose[1:16])
df <- pizpar2
# Recode things and make the order of everything as consistent as possible
df <- df %>%
mutate( lik_short_pizza = if_else(Start=="Hot dogs visible",
short_inv, short_vis),
lik_long_pizza = if_else(Start=="Hot dogs visible",
long_inv, long_vis),
lik_short_hotdog = if_else(Start=="Hot dogs visible",
short_vis, short_inv),
lik_long_hotdog = if_else(Start=="Hot dogs visible",
long_vis, long_inv)) %>%
select(-short_vis, -long_vis, -short_inv, -long_inv)
View(df)
df<-df %>% mutate(lik_sum = lik_short_pizza + lik_long_pizza + lik_short_hotdog + lik_long_hotdog,
p_short_pizza = lik_short_pizza/lik_sum,
p_long_pizza = lik_long_pizza/lik_sum,
p_short_hotdog = lik_short_hotdog/lik_sum,
p_long_hotdog = lik_long_hotdog/lik_sum,
p_long = p_long_pizza + p_long_hotdog,
p_hotdog = p_short_hotdog + p_long_hotdog)
View(df)
View(df)
setwd("~/Downloads/gridworld_situation_model")
rm(list=ls())
df.preprocessed<-read.csv('pizpar3.csv') #Just to compare
df.raw<-read.csv('forneil.csv')
View(df.raw)
# Recode things and make the order of everything as consistent as possible
df.raw <- df.raw %>%
mutate( lik_short_pizza = if_else(Start=="Hot dogs visible",
short_inv, short_vis),
lik_long_pizza = if_else(Start=="Hot dogs visible",
long_inv, long_vis),
lik_short_hotdog = if_else(Start=="Hot dogs visible",
short_vis, short_inv),
lik_long_hotdog = if_else(Start=="Hot dogs visible",
long_vis, long_inv)) %>%
select(-short_vis, -long_vis, -short_inv, -long_inv)
df<-df.raw %>% mutate(lik_sum = lik_short_pizza + lik_long_pizza + lik_short_hotdog + lik_long_hotdog,
p_short_pizza = lik_short_pizza/lik_sum,
p_long_pizza = lik_long_pizza/lik_sum,
p_short_hotdog = lik_short_hotdog/lik_sum,
p_long_hotdog = lik_long_hotdog/lik_sum,
p_long = p_long_pizza + p_long_hotdog,
p_hotdog = p_short_hotdog + p_long_hotdog)
head(df)
df<-df %>% select(-X, -situTag) %>% mutate(Preference = factor(Preference, levels = c('Absent','Hot dogs'), labels = c('Absent','Hotdog')),
Knowledge = factor(Knowledge, levels = c('No','Yes')),
Character = factor(Character, levels = c('Lazy','Sporty')),
Start = factor(Start, levels = c('Pizza visible','Hot dogs visible'), labels = c('See_pizza','See_hotdog')),
P = factor(Preference, levels = c('Absent','Hotdog'), labels = 0:1),
K = factor(Knowledge, levels = c('No','Yes'), labels = 0:1),
C = factor(Character, levels = c('Lazy','Sporty'), labels = 0:1),
S = factor(Start, levels = c('See_pizza','See_hotdog'), labels = 0:1),
SituationVerbose = paste0(Preference, Knowledge,Character, Start),
Situation = paste0(P,K,C,S),
mindsCode = factor(mindsCode, levels = unique(mindsCode)),
id = factor(mindsCode, levels = unique(mindsCode), labels = 1:length(unique(mindsCode)))) %>% arrange(id, S,C,K,P)
df<-df %>% mutate(SituationVerbose = factor(SituationVerbose, levels = SituationVerbose[1:16]),
Situation = factor(Situation, levels = Situation[1:16]))
setwd("~/Documents/GitHub/gw/Exp1Prediction/Data")
rm(list = ls())
# Read in data downloaded as long from testable
pizpar <- read.csv("params_data_Jan23.csv") # 1456 obs of 41 vars
# Choose only active rows
pizpar <-  pizpar %>% filter(mindsCode!="") # 1440 obs of 41 vars = 90 ppts
# Reverse response columns for group 2
pizpar <- pizpar %>%
mutate(flipped = if_else(subjectGroup=='2', stri_reverse(responseCode), responseCode))
# Copy just in case
pizpar$flipped2 <- pizpar$flipped
# Split out the response column and remove delimiter |
# These names are needed due to the different starting points of the agents, different food was visible
# Later we can know which relates to which by eg. `if_else Start=='hotdog"`
pizpar <- separate(data = pizpar, col = flipped2, into = c("short_inv", "long_inv", "short_vis", "long_vis"), sep = "\\|")
# The convention of eg. 'short path to visible food' was used for this part of the project, self contained. Was then abandoned.
pizpar$short_vis <- as.numeric(pizpar$short_vis)
pizpar$long_vis <- as.numeric(pizpar$long_vis)
pizpar$short_inv <- as.numeric(pizpar$short_inv)
pizpar$long_inv <- as.numeric(pizpar$long_inv)
pizpar$row_sum <- rowSums(pizpar[ , c(43:46)])
# Later for Neil instead of previous line:
# New smaller df with columns we need
pizpar2 <- pizpar %>% select(mindsCode, subjectGroup, stim1, rowNo, note1, short_vis, long_vis, short_inv, long_inv)
pizpar2 <- pizpar2 %>% mutate(Preference = if_else(grepl("F", note1), 'Hot dogs', 'Absent'))
pizpar2 <- pizpar2 %>% mutate(Knowledge = if_else(grepl("K", note1), 'Knows area', 'Does not know area'))
pizpar2 <- pizpar2 %>% mutate(Character = if_else(grepl("L", note1), 'Lazy', 'Sporty'))
pizpar2 <- pizpar2 %>% mutate(Start = if_else(grepl("A", stim1), 'Hot dogs visible', 'Pizza visible'))
View(pizpar2)
View(pizpar2)
pizpar2 <- pizpar2 %>%
mutate(Z = if_else(pizpar2$Preference=="Absent", "0", "1"),
Y = if_else(pizpar2$Knowledge=="Yes", "1", "0"),
X = if_else(pizpar2$Character=="Sporty", "1", "0"),
Q = if_else(pizpar2$Start=="Hot dogs visible", "1", "0"))
View(pizpar2)
rm(list = ls())
library(stringi)
library(data.table)
library(tidyverse)
# Read in data downloaded as long from testable
pizpar <- read.csv("params_data_Jan23.csv") # 1456 obs of 41 vars
# Choose only active rows
pizpar <-  pizpar %>% filter(mindsCode!="") # 1440 obs of 41 vars = 90 ppts
# Reverse response columns for group 2
pizpar <- pizpar %>%
mutate(flipped = if_else(subjectGroup=='2', stri_reverse(responseCode), responseCode))
# Copy just in case
pizpar$flipped2 <- pizpar$flipped
# Split out the response column and remove delimiter |
# These names are needed due to the different starting points of the agents, different food was visible
# Later we can know which relates to which by eg. `if_else Start=='hotdog"`
pizpar <- separate(data = pizpar, col = flipped2, into = c("short_inv", "long_inv", "short_vis", "long_vis"), sep = "\\|")
# The convention of eg. 'short path to visible food' was used for this part of the project, self contained. Was then abandoned.
pizpar$short_vis <- as.numeric(pizpar$short_vis)
pizpar$long_vis <- as.numeric(pizpar$long_vis)
pizpar$short_inv <- as.numeric(pizpar$short_inv)
pizpar$long_inv <- as.numeric(pizpar$long_inv)
# pizpar$row_sum <- rowSums(pizpar[ , c(43:46)])
#
# # Normalise these 4 columns into probabilities
# pizpar$short_vis_norm <- pizpar$short_vis/pizpar$row_sum
# pizpar$long_vis_norm <- pizpar$long_vis/pizpar$row_sum
# pizpar$short_inv_norm <- pizpar$short_inv/pizpar$row_sum
# pizpar$long_inv_norm <- pizpar$long_inv/pizpar$row_sum
# New smaller df with columns we need
pizpar2 <- pizpar %>% select(mindsCode, subjectGroup, stim1, rowNo, note1, short_vis, long_vis, short_inv, long_inv)
# Set columns for what the condition tags actually mean
pizpar2 <- pizpar2 %>% mutate(Preference = if_else(grepl("F", note1), 'Hot dogs', 'Absent'))
pizpar2 <- pizpar2 %>% mutate(Knowledge = if_else(grepl("K", note1), 'Knows area', 'Does not know area'))
pizpar2 <- pizpar2 %>% mutate(Character = if_else(grepl("L", note1), 'Lazy', 'Sporty'))
pizpar2 <- pizpar2 %>% mutate(Start = if_else(grepl("A", stim1), 'Hot dogs visible', 'Pizza visible'))
df <- pizpar2
View(df)
# Recode things and make the order of everything as consistent as possible
df <- df %>%
mutate( lik_short_pizza = if_else(Start=="Hot dogs visible",
short_inv, short_vis),
lik_long_pizza = if_else(Start=="Hot dogs visible",
long_inv, long_vis),
lik_short_hotdog = if_else(Start=="Hot dogs visible",
short_vis, short_inv),
lik_long_hotdog = if_else(Start=="Hot dogs visible",
long_vis, long_inv)) %>%
select(-short_vis, -long_vis, -short_inv, -long_inv)
df<-df %>% mutate(lik_sum = lik_short_pizza + lik_long_pizza + lik_short_hotdog + lik_long_hotdog,
p_short_pizza = lik_short_pizza/lik_sum,
p_long_pizza = lik_long_pizza/lik_sum,
p_short_hotdog = lik_short_hotdog/lik_sum,
p_long_hotdog = lik_long_hotdog/lik_sum,
p_long = p_long_pizza + p_long_hotdog,
p_hotdog = p_short_hotdog + p_long_hotdog)
df<-df %>% mutate(Preference = factor(Preference, levels = c('Absent','Hot dogs'), labels = c('Absent','Hotdog')),
Knowledge = factor(Knowledge, levels = c('No','Yes')),
Character = factor(Character, levels = c('Lazy','Sporty')),
Start = factor(Start, levels = c('Pizza visible','Hot dogs visible'), labels = c('See_pizza','See_hotdog')),
P = factor(Preference, levels = c('Absent','Hotdog'), labels = 0:1),
K = factor(Knowledge, levels = c('No','Yes'), labels = 0:1),
C = factor(Character, levels = c('Lazy','Sporty'), labels = 0:1),
S = factor(Start, levels = c('See_pizza','See_hotdog'), labels = 0:1),
SituationVerbose = paste0(Preference, Knowledge,Character, Start),
Situation = paste0(P,K,C,S),
mindsCode = factor(mindsCode, levels = unique(mindsCode)),
id = factor(mindsCode, levels = unique(mindsCode), labels = 1:length(unique(mindsCode)))) %>% arrange(id, S,C,K,P)
df<-df %>% mutate(SituationVerbose = factor(SituationVerbose, levels = SituationVerbose[1:16]),
Situation = factor(Situation, levels = Situation[1:16]))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
str(df)
View(pizpar2)
View(df)
rm(list = ls())
library(stringi)
library(data.table)
library(tidyverse)
# Read in data downloaded as long from testable
pizpar <- read.csv("params_data_Jan23.csv") # 1456 obs of 41 vars
# Choose only active rows
pizpar <-  pizpar %>% filter(mindsCode!="") # 1440 obs of 41 vars = 90 ppts
# Reverse response columns for group 2
pizpar <- pizpar %>%
mutate(flipped = if_else(subjectGroup=='2', stri_reverse(responseCode), responseCode))
# Copy just in case
pizpar$flipped2 <- pizpar$flipped
# Split out the response column and remove delimiter |
# These names are needed due to the different starting points of the agents, different food was visible
# Later we can know which relates to which by eg. `if_else Start=='hotdog"`
pizpar <- separate(data = pizpar, col = flipped2, into = c("short_inv", "long_inv", "short_vis", "long_vis"), sep = "\\|")
# The convention of eg. 'short path to visible food' was used for this part of the project, self contained. Was then abandoned.
pizpar$short_vis <- as.numeric(pizpar$short_vis)
pizpar$long_vis <- as.numeric(pizpar$long_vis)
pizpar$short_inv <- as.numeric(pizpar$short_inv)
pizpar$long_inv <- as.numeric(pizpar$long_inv)
# pizpar$row_sum <- rowSums(pizpar[ , c(43:46)])
#
# # Normalise these 4 columns into probabilities
# pizpar$short_vis_norm <- pizpar$short_vis/pizpar$row_sum
# pizpar$long_vis_norm <- pizpar$long_vis/pizpar$row_sum
# pizpar$short_inv_norm <- pizpar$short_inv/pizpar$row_sum
# pizpar$long_inv_norm <- pizpar$long_inv/pizpar$row_sum
# New smaller df with columns we need
pizpar2 <- pizpar %>% select(mindsCode, subjectGroup, stim1, rowNo, note1, short_vis, long_vis, short_inv, long_inv)
# Set columns for what the condition tags actually mean
pizpar2 <- pizpar2 %>% mutate(Preference = if_else(grepl("F", note1), 'Hot dogs', 'Absent'))
pizpar2 <- pizpar2 %>% mutate(Knowledge = if_else(grepl("K", note1), 'Knows area', 'Does not know area'))
pizpar2 <- pizpar2 %>% mutate(Character = if_else(grepl("L", note1), 'Lazy', 'Sporty'))
pizpar2 <- pizpar2 %>% mutate(Start = if_else(grepl("A", stim1), 'Hot dogs visible', 'Pizza visible'))
# Set as factors for the regressions
pizpar2$Preference <- factor(pizpar2$Preference, levels = c('Absent', 'Hot dogs'),labels = c('Absent', 'Hot dogs'))
pizpar2$Knowledge <- factor(pizpar2$Knowledge, levels = c('Does not know area', 'Knows area'), labels = c('No', 'Yes'))
pizpar2$Character <- factor(pizpar2$Character, levels = c('Lazy', 'Sporty'), labels = c('Lazy', 'Sporty'))
pizpar2$Start <- factor(pizpar2$Start, levels = c('Pizza visible', 'Hot dogs visible'), labels = c('Pizza visible', 'Hot dogs visible'))
df <- pizpar2
# Recode things and make the order of everything as consistent as possible
df <- df %>%
mutate( lik_short_pizza = if_else(Start=="Hot dogs visible",
short_inv, short_vis),
lik_long_pizza = if_else(Start=="Hot dogs visible",
long_inv, long_vis),
lik_short_hotdog = if_else(Start=="Hot dogs visible",
short_vis, short_inv),
lik_long_hotdog = if_else(Start=="Hot dogs visible",
long_vis, long_inv)) %>%
select(-short_vis, -long_vis, -short_inv, -long_inv)
df<-df %>% mutate(lik_sum = lik_short_pizza + lik_long_pizza + lik_short_hotdog + lik_long_hotdog,
p_short_pizza = lik_short_pizza/lik_sum,
p_long_pizza = lik_long_pizza/lik_sum,
p_short_hotdog = lik_short_hotdog/lik_sum,
p_long_hotdog = lik_long_hotdog/lik_sum,
p_long = p_long_pizza + p_long_hotdog,
p_hotdog = p_short_hotdog + p_long_hotdog)
df<-df %>% mutate(Preference = factor(Preference, levels = c('Absent','Hot dogs'), labels = c('Absent','Hotdog')),
Knowledge = factor(Knowledge, levels = c('No','Yes')),
Character = factor(Character, levels = c('Lazy','Sporty')),
Start = factor(Start, levels = c('Pizza visible','Hot dogs visible'), labels = c('See_pizza','See_hotdog')),
P = factor(Preference, levels = c('Absent','Hotdog'), labels = 0:1),
K = factor(Knowledge, levels = c('No','Yes'), labels = 0:1),
C = factor(Character, levels = c('Lazy','Sporty'), labels = 0:1),
S = factor(Start, levels = c('See_pizza','See_hotdog'), labels = 0:1),
SituationVerbose = paste0(Preference, Knowledge,Character, Start),
Situation = paste0(P,K,C,S),
mindsCode = factor(mindsCode, levels = unique(mindsCode)),
id = factor(mindsCode, levels = unique(mindsCode), labels = 1:length(unique(mindsCode)))) %>% arrange(id, S,C,K,P)
df<-df %>% mutate(SituationVerbose = factor(SituationVerbose, levels = SituationVerbose[1:16]),
Situation = factor(Situation, levels = Situation[1:16]))
# df<-df %>% SituationVerbose = factor(SituationVerbose, levels = SituationVerbose[1:16])
# df<-df %>% Situation = factor(Situation, levels = Situation[1:16])
#Put the outcome order in the intutive sequence, shortpath-pizza, longpath-pizza, shortpath-hotdog, longpath-hotdog
View(df)
getwd()
write.csv(df, 'gwdata.csv')
rm(list=ls())
library(tidyverse)
library(ggplot2)
#library(igraph)
df <- read.csv('../Data/gwdata.csv') # saved in `gw_preprocessing.Rmd`
# Get the target distribution to be fit
td <-df %>% group_by(Situation) %>% summarise(p_short_pizza = mean(p_short_pizza, na.rm=T),
p_long_pizza = mean(p_long_pizza, na.rm=T),
p_short_hotdog = mean(p_short_hotdog, na.rm=T),
p_long_hotdog = mean(p_long_hotdog, na.rm=T)) %>% data.frame()
td<-td[,2:5]
# We actually just need the two marginals
td_path<-(df %>% group_by(Situation) %>% summarise(p_long = mean(p_long, na.rm=T)))$p_long
td_destination<-(df %>% group_by(Situation) %>% summarise(p_hotdog = mean(p_hotdog, na.rm=T)))$p_hotdog
str(df)
head(df, 16)
structures <- expand.grid(P=-1:1,K=-1:1,C=-1:1,S=-1:1, PK=-1:1,PC=-1:1,PS=-1:1,KC=-1:1,KS=-1:1,CS=-1:1)
init_full_par <- list(s = c(P = .5,
K = .5,
C = .5,
S = .5,
PK=.5,
PC=.5,
PS=.5,
KC=.5,
KS=.5,
CS=.5),
br = .5,#Base rate
tau = 1
)
#Global indexing variable to avoid redefining indices during the optimisation
ix <- expand.grid(S=0:1,C=0:1,K=0:1,P=0:1)
