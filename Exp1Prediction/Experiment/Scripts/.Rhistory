noisyOR <- 1-(1-baserate)
hotdog_score <- noisyOR * pref_push * char_push
pizza_score <- 1-char*char_match_pizza * prom_pizza
p_choose_hotdog <- hotdog_score * pizza_score
return (p_choose_hotdog)
}
pChoice$prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(0.5,0.5,0.5))
# My meddling
hotdog_promotion <- function(char, pref, baserate) {
pref_prom_hotdog <- 1 - pref * pref_match_hotdog * prom_hotdog
char_prom_hotdog <- 1 - char * char_match_hotdog * prom_hotdog
noisyOR <- 1-(1-baserate)
hotdog_score <- noisyOR * pref_prom_hotdog * char_prom_hotdog
pizza_score <- 1-char*char_match_pizza * prom_pizza
p_choose_hotdog <- hotdog_score * pizza_score
return (p_choose_hotdog)
}
pChoice$prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(0.5,0.5,0.5))
pChoice$prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(strengths[['character']], strengths[['preference']], baserate))
pChoice$prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(c(strengths[['character']], strengths[['preference']], baserate))
prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(c(strengths[['character']], strengths[['preference']], baserate))
prob_choose_hotdog <- sapply(pChoice, hotdog_promotion(c(strengths[['character']], strengths[['preference']], baserate)))
# My meddling
hotdog_promotion <- function() {
pref_prom_hotdog <- 1 - strengths[['preference']] * pref_match_hotdog * prom_hotdog
char_prom_hotdog <- 1 - strengths[['character']] * char_match_hotdog * prom_hotdog
noisyOR <- 1-(1-baserate)
hotdog_score <- noisyOR * pref_prom_hotdog * char_prom_hotdog
pizza_score <- 1-char*char_match_pizza * prom_pizza
p_choose_hotdog <- hotdog_score * pizza_score
return (p_choose_hotdog)
}
prob_choose_hotdog <- sapply(pChoice, hotdog_promotion())
# My meddling
hotdog_promotion <- function() {
pref_prom_hotdog <- 1 - strengths[['preference']] * pref_match_hotdog * prom_hotdog
char_prom_hotdog <- 1 - strengths[['character']] * char_match_hotdog * prom_hotdog
noisyOR <- 1-(1-baserate)
hotdog_score <- noisyOR * pref_prom_hotdog * char_prom_hotdog
pizza_score <- 1- strengths[['character']] *char_match_pizza * prom_pizza
p_choose_hotdog <- hotdog_score * pizza_score
return (p_choose_hotdog)
}
prob_choose_hotdog <- sapply(pChoice, hotdog_promotion())
22/110
2.002/10.10
5.005/10.01
2.005/10.1
2.002/10.1
52/110
exp(100)
exp(1)
runif(4)
sessionInfo()
sessionInfo()
sessionInfo()
install.packages("afex")
install.packages("faux")
library(broom, tidyverse, faux, afex)
library(broom)
library(faux)
library(afex)
R.version()
R.Version()
.libPaths()
.libPaths()
R.Version()
# ------- Prelims -----------
library(tidyverse)
library(ggplot2)
# ----------- Define an example prior df -------------------------
# Here define two causal vars and an exogenous noise variable for each (i.e. var epsilon A goes with A)
# in the exp setting this is 0.5
p_A <- c(.1,.9) # ie A usually has value 1... base rate for cause
p_epsA <- c(.7,.3) #... most of the time the noise var for a doesn't occur. for a to work it needs a and exp a. a is usually present but ogten doesnt work cos of noise term not working
p_B <- c(.8,.2) # B rarely fires 1...
p_epsB <- c(.3,.7) # but when it does it is strong
# And wrap them into a df called prior. Later the function should take dfs of this format:
# i.e. any number of causes as the rows, and the probs of them taking 0 and 1 as cols
params <- data.frame(rbind(p_A, p_epsA, p_B, p_epsB))
colnames(params) <- c(0,1)
# Other values set outside for now
N_cf <- 1000L # How many counterfactual samples to draw
s <- .7 # Stability
n_causes <- nrow(params)
causes <- rownames(params)
# Make a df of all combinations of variable settings
df <- expand.grid(rep(list(c(0,1)),n_causes), KEEP.OUT.ATTRS = F)
# ... with variables as the column names
colnames(df) <- causes
worlds <- nrow(df)
View(df)
structure <- 'disjunctive'
if (structure=="disjunctive") {
df$E <- as.numeric((df[1] & df[2]) | (df[3] & df[4]))
}
# Can replace with this - if rename - it is deterministic - literally gives specific outcome for set 3 causes, needs actual input. mechanical tell syou whether effects occurred given setting
# df$effect <- max( c(min(c1,e1), min(c2,e2), min(c3, e3), min(c2*c3, e23))) # BUT SAME PROBLEM - HOW TO AUTOMATICALLY DEAL WITH ANY NUMBER OF CAUSES?
mat <- as.matrix(df[,1:4])
View(mat)
# df2 <- as.matrix(df, dimnames=NULL)
# dimnames = list(c(1:16), c(causes))
# Replace every cell with the relevant indexed edge strength from params
for (k in 1:worlds){
for (cause in causes) {
a <- params[cause,df[k,cause]+1] # It needs the '+1' because r indexes from 1 not 0
mat[k,cause] <- a # ((then sometimes #*df[k,cause] if do at same time as structure but change later if need))
}
}
View(mat)
View(params)
# For each row of df, the prior is now the product of the same row of df2
df$Pr <- apply(mat, 1, prod) # parameter of the model
sum(df$Pr)
# Then loop to calculate cfs and assign causal responsibility
# Loop through possible world settings
for (c_ix in 1:worlds)
sd(3000)
?rbinom
N <- 10^4
rbinom(N,1,.3)
sd_v <- sd(v)
v <- rbinom(N,1,.3)
sd_v <- sd(v)
?sd
th <- 0.3*0.7
p <- 0.3
derived <- (N*p(1-p))^0.5
derived <- (N*p*(1-p))^0.5
derived <- (N*3000*(1-p))^0.5
(p*(1-p)/n)^0.5
(p*(1-p)/N)^0.5
((p*(1-p))/N)^0.5
sum(v)
((3050*(6950))/N)^0.5
(N*p*(1-p))^0.5
q <- 0.7
p*q
0.3*0.7
N*p*q
2100^0.5
sqrt(2100)
(p*q/N)^0.5
((p*q)/N)^0.5
0.198^0.5
pest <- mean(v)
var <- (pest*(1-pest))/N
sqrt(var)
n <- 100
p*q/n
sqrt(p*q/n)
v2 <- rbinom(n,1,.3)
sd(v2)
sqrt(p*q)
sd(pest*(1-pest))
n2 <- 100000
v3 <- rbinom(n2,1,.3)
sd(v3)
sd(v2)
sd(v)
sum(v)
mean(v)
r <- mean(v)
g <- 1-r
sqrt(r*g)
?file.access
install.packages("gander")
usethis::edit_r_environ()
usethis::edit_r_profile()
library(ggplot2)
library(gander)
install.packages('ellmer')
library(ellmer)
library(ellmer)
library(gander)
data("stackoverflow", package = "modeldata")
stackoverflow
```r
stackoverflow %>%
summarise(across(where(is.numeric), list(mean = mean, sd = sd), na.rm = TRUE))
usethis::edit_r_profile()
usethis::edit_r_profile()
setwd("~/Documents/GitHub/gw/Exp1Prediction/Experiment/Scripts")
# Load df 1421 of 27. Each row is one participant's response to one of the 16 situations. Was 1440 but 19 had 0s so were removed.
load('../Data/gwExp1data.Rda')
rm(list=ls())
setwd("~/Documents/GitHub/gw/Exp1Prediction/Model/Scripts")
# Load df 1421 of 27. Each row is one participant's response to one of the 16 situations. Was 1440 but 19 had 0s so were removed.
load('../../Experiment/Data/gwExp1data.Rda')
# Get the complete target distribution over all outcomes: 16 of 5, then lose first column
td <- df |>
group_by(Situation) |>
summarise(p_short_pizza = mean(p_short_pizza, na.rm=T),
p_long_pizza = mean(p_long_pizza, na.rm=T),
p_short_hotdog = mean(p_short_hotdog, na.rm=T),
p_long_hotdog = mean(p_long_hotdog, na.rm=T)) |>
data.frame()
library(tidyverse)
# Get the complete target distribution over all outcomes: 16 of 5, then lose first column
td <- df |>
group_by(Situation) |>
summarise(p_short_pizza = mean(p_short_pizza, na.rm=T),
p_long_pizza = mean(p_long_pizza, na.rm=T),
p_short_hotdog = mean(p_short_hotdog, na.rm=T),
p_long_hotdog = mean(p_long_hotdog, na.rm=T)) |>
data.frame()
View(td)
# A new df like td but to get sd instead
td_sd <- df |>
group_by(Situation) |>
summarise(sd_short_pizza = sd(p_short_pizza, na.rm=T),
sd_long_pizza = sd(p_long_pizza, na.rm=T),
sd_short_hotdog = sd(p_short_hotdog, na.rm=T),
sd_long_hotdog = sd(p_long_hotdog, na.rm=T)) |>
data.frame()
library(knitr)
kable(td_sd, format = "latex", digits = 3, caption = "Standard Deviations by Situation", col.names = c("Situation", "Short Pizza", "Long Pizza", "Short Hotdog", "Long Hotdog"))
View(td_sd)
kable(td, format = "latex", digits = 3, caption = "Target Distributions by Situation",
col.names = c("Situation", "Short Pizza", "Long Pizza", "Short Hotdog", "Long Hotdog"))
td_both <- td_sd[,2:5]
colnames(td_both) <- c("sd_short_pizza", "sd_long_pizza", "sd_short_hotdog", "sd_long_hotdog")
td_both <- rbind(td, td_both)
td_both <- td_sd[,2:5]
colnames(td_both) <- c("sd_short_pizza", "sd_long_pizza", "sd_short_hotdog", "sd_long_hotdog")
#td_both <- rbind(td, td_both)
td_both <- td_both |>
mutate(Situation = rep(1:16, each=2)) |>
select(Situation, everything())
td_both <- td_sd
colnames(td_both) <- c("Situation", "sd_short_pizza", "sd_long_pizza", "sd_short_hotdog", "sd_long_hotdog")
td_both <- rbind(td, td_both)
td_combined <- data.frame(
Situation = 1:16,
Short_Pizza_Mean = td$p_short_pizza,
Short_Pizza_SD = td_sd$sd_short_pizza,
Long_Pizza_Mean = td$p_long_pizza,
Long_Pizza_SD = td_sd$sd_long_pizza,
Short_Hotdog_Mean = td$p_short_hotdog,
Short_Hotdog_SD = td_sd$sd_short_hotdog,
Long_Hotdog_Mean = td$p_long_hotdog,
Long_Hotdog_SD = td_sd$sd_long_hotdog
)
kable(td_combined, format = "latex", digits = 3,
caption = "Means and Standard Deviations by Situation",
col.names = c("Situation", "Mean", "SD", "Mean", "SD", "Mean", "SD", "Mean", "SD")) |>
add_header_above(c(" " = 1, "Short Pizza" = 2, "Long Pizza" = 2, "Short Hotdog" = 2, "Long Hotdog" = 2))
library(kableExtra)
install.packages('kable.extra')
library(kableExtra)
install.packages('kableExtra')
library(kableExtra)
kable(td_combined, format = "latex", digits = 3,
caption = "Means and Standard Deviations by Situation",
col.names = c("Situation", "Mean", "SD", "Mean", "SD", "Mean", "SD", "Mean", "SD")) |>
add_header_above
kable(td_combined, format = "latex", digits = 3,
caption = "Means and Standard Deviations by Situation",
col.names = c("Situation", "Mean", "SD", "Mean", "SD", "Mean", "SD", "Mean", "SD")) |>
add_header_above(c(" " = 1, "Short Pizza" = 2, "Long Pizza" = 2, "Short Hotdog" = 2, "Long Hotdog" = 2))
kable(td_combined, format = "latex", digits = 3,
caption = "Means and Standard Deviations by Situation",
col.names = c("Situation", "Mean", "SD", "Mean", "SD", "Mean", "SD", "Mean", "SD"),
format.args = list(drop0trailing = TRUE)) |>
add_header_above(c(" " = 1, "Short Pizza" = 2, "Long Pizza" = 2, "Short Hotdog" = 2, "Long Hotdog" = 2))
kable(td_combined, format = "latex", digits = 3,
drop0trailing = TRUE,
caption = "Means and Standard Deviations by Situation",
col.names = c("Situation", "Mean", "SD", "Mean", "SD", "Mean", "SD", "Mean", "SD")) |>
add_header_above(c(" " = 1, "Short Pizza" = 2, "Long Pizza" = 2, "Short Hotdog" = 2, "Long Hotdog" = 2))
str(td_combined)
View(td_combined)
View(td)
# Calculate marginal probabilities for path and destination
td_path <- (df |>
group_by(Situation) |>
summarise(p_long = mean(p_long, na.rm=T)))$p_long
td_destination <- (df |>
group_by(Situation) |>
summarise(p_hotdog = mean(p_hotdog, na.rm=T)))$p_hotdog
# Save target distributions for later modelling
save(td, td_sd, td_combined, td_path, td_destination, file = '../Data/targetDist.Rda')
rm(list=ls())
# Load target distributions for path and destination choices
load('../Data/targetDist.rdata')        # td_path: 16 obs of prob
getwd()
# Load target distributions for path and destination choices
load('../Data/targetDist.rda')        # td_path: 16 obs of prob
rm(list=ls())
setwd("~/Documents/GitHub/gw/Exp1Prediction/Experiment/Scripts")
# Load df 1421 of 27. Each row is one participant's response to one of the 16 situations. Was 1440 but 19 had 0s so were removed.
load('../Data/gwExp1data.Rda')
# To make a scatterplot of participants' actual ratings on a 1:7 Likert scale
forscatter_long <- df |>
select(mindsCode, lik_short_pizza:lik_long_hotdog, Situation) |>
pivot_longer(
cols = lik_short_pizza:lik_long_hotdog,
names_to = "Choice",
values_to = "Rating"
)
library(ggplot2)
library(ggbeeswarm)
# To make a scatterplot of participants' actual ratings on a 1:7 Likert scale
forscatter_long <- df |>
select(mindsCode, lik_short_pizza:lik_long_hotdog, Situation) |>
pivot_longer(
cols = lik_short_pizza:lik_long_hotdog,
names_to = "Choice",
values_to = "Rating"
)
# A coloured beeswarm plot showing distribution of ratings, faceted by the 16 situations
ggplot(forscatter_long, aes(x = Choice, y = Rating, color = Choice)) +
geom_beeswarm(cex = 0.3) +
facet_wrap(~Situation) +
labs(x = "Item", y = "Rating") +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
situations <- unique(forscatter_long$Situation)
plot_situation <- function(sit) {
ggplot(forscatter_long |> filter(Situation == sit), aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
labs(x = "Item", y = "Rating", title = sit) +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
}
plots <- lapply(situations, plot_situation)
for(i in 1:length(plots)) {
print(plots[[i]])
}
stat_summary(fun = mean, geom = "point", size = 3, shape = 16) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2)
plot_situation <- function(sit) {
ggplot(forscatter_long |> filter(Situation == sit), aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 16) +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
labs(x = "Item", y = "Rating", title = sit) +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
}
plots <- lapply(situations, plot_situation)
for(i in 1:length(plots)) {
print(plots[[i]])
}
plot_situation <- function(sit) {
ggplot(forscatter_long |> filter(Situation == sit), aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 16, color = 'black') +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
labs(x = "Item", y = "Rating", title = sit) +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
}
plots <- lapply(situations, plot_situation)
for(i in 1:length(plots)) {
print(plots[[i]])
}
plot_situation <- function(sit) {
ggplot(forscatter_long |> filter(Situation == sit), aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 16, color = 'black') +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2, color = 'black') +
labs(x = "Item", y = "Rating", title = sit) +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
}
plots <- lapply(situations, plot_situation)
for(i in 1:length(plots)) {
print(plots[[i]])
}
getwd()
# Save this series of 16 to a pdf in folder
ggsave("../Figures/likert_ratings_by_situation.pdf", marrangeGrob(plots, nrow=4, ncol=2), width=11, height=8.5)
?marrangeGrab
?marrangeGrob
# Modify loop to also save each using ggsave
for(i in 1:length(plots)) {
ggsave(paste0("../Figures/likert", gsub(" ", "_", situations[i]), ".pdf"), plots[[i]], width=8, height=6)
#print(plots[[i]])
}
plot_situation <- function(sit) {
ggplot(forscatter_long |> filter(Situation == sit), aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 16, color = 'black') +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2, color = 'black') +
stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 2)), vjust = -1.5, color = 'black') +
labs(x = "Item", y = "Rating", title = sit) +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
}
plots <- lapply(situations, plot_situation)
# Modify loop to also save each using ggsave
for(i in 1:length(plots)) {
#ggsave(paste0("../Figures/likert", gsub(" ", "_", situations[i]), ".pdf"), plots[[i]], width=8, height=6)
print(plots[[i]])
}
plot_situation <- function(sit) {
ggplot(forscatter_long |> filter(Situation == sit), aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 16, color = 'black') +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2, color = 'black') +
stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 2)), vjust = -1.5, hjust = 2, color = 'black') +
labs(x = "Item", y = "Rating", title = sit) +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
}
plots <- lapply(situations, plot_situation)
# Modify loop to also save each using ggsave
for(i in 1:length(plots)) {
#ggsave(paste0("../Figures/likert", gsub(" ", "_", situations[i]), ".pdf"), plots[[i]], width=8, height=6)
print(plots[[i]])
}
plot_situation <- function(sit) {
ggplot(forscatter_long |> filter(Situation == sit), aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 16, color = 'black') +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2, color = 'black') +
stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 2)), vjust = -1.5, hjust = -1, color = 'black') +
labs(x = "Item", y = "Rating", title = sit) +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
}
plots <- lapply(situations, plot_situation)
# Modify loop to also save each using ggsave
for(i in 1:length(plots)) {
#ggsave(paste0("../Figures/likert", gsub(" ", "_", situations[i]), ".pdf"), plots[[i]], width=8, height=6)
print(plots[[i]])
}
plot_situation <- function(sit) {
ggplot(forscatter_long |> filter(Situation == sit), aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 16, color = 'black') +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2, color = 'black') +
stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 2)), vjust = -1.5, hjust = -0.5, color = 'black') +
labs(x = "Item", y = "Rating", title = sit) +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
}
plots <- lapply(situations, plot_situation)
# Modify loop to also save each using ggsave
for(i in 1:length(plots)) {
#ggsave(paste0("../Figures/likert", gsub(" ", "_", situations[i]), ".pdf"), plots[[i]], width=8, height=6)
print(plots[[i]])
}
# Modify loop to also save each using ggsave
for(i in 1:length(plots)) {
ggsave(paste0("../Figures/likert", gsub(" ", "_", situations[i]), ".pdf"), plots[[i]], width=8, height=6)
#print(plots[[i]])
}
# Split situations into two halves
first_half <- situations[1:8]
second_half <- situations[9:16]
# Create first facet grid (2x4)
first_grid <- forscatter_long |>
filter(Situation %in% first_half) |>
ggplot(aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 16, color = 'black') +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2, color = 'black') +
stat_summary(fun = mean, geom = "text", aes(label = round(after_stat(y), 2)), vjust = -1.5, hjust = -0.5, color = 'black') +
facet_wrap(~Situation, ncol = 2, nrow = 4) +
labs(x = "Item", y = "Rating") +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
# Create second facet grid (2x4)
second_grid <- forscatter_long |>
filter(Situation %in% second_half) |>
ggplot(aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 16, color = 'black') +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2, color = 'black') +
stat_summary(fun = mean, geom = "text", aes(label = round(after_stat(y), 2)), vjust = -1.5, hjust = -0.5, color = 'black') +
facet_wrap(~Situation, ncol = 2, nrow = 4) +
labs(x = "Item", y = "Rating") +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
# Save the faceted plots
ggsave("../Figures/likertFirst.pdf", first_grid, width = 12, height = 16)
ggsave("../Figures/likertSecond.pdf", second_grid, width = 12, height = 16)
second_grid <- forscatter_long |>
filter(Situation %in% second_half) |>
ggplot(aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 16, color = 'black') +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2, color = 'black') +
stat_summary(fun = mean, geom = "text", aes(label = round(after_stat(y), 2)), vjust = -1.5, hjust = -0.5, color = 'black') +
facet_wrap(~Situation, ncol = 2, nrow = 4) +
labs(x = "Item", y = "Rating") +
theme_minimal() +
theme(panel.spacing = unit(1.5, "lines"),
strip.text = element_text(size = 12),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)) +
scale_x_discrete(guide = guide_axis(angle = 45))
ggsave("../Figures/likertSecond.pdf", second_grid, width = 15, height = 20)
plot_situation <- function(sit) {
ggplot(forscatter_long |> filter(Situation == sit), aes(x = Choice, y = Rating, color = Choice)) +
geom_jitter(width = 0.3, height = 0.1, size = 0.5, alpha = 0.6) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 16, color = 'black') +
stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2, color = 'black') +
stat_summary(fun = mean, geom = "text", aes(label = round(..y.., 2)), vjust = -1.5, hjust = -0.5, color = 'black') +
labs(x = "Item", y = "Rating", title = sit) +
theme_minimal() +
scale_x_discrete(guide = guide_axis(angle = 45))
}
plots <- lapply(situations, plot_situation)
# Modify loop to also save each using ggsave
for(i in 1:length(plots)) {
ggsave(paste0("../Figures/likert", gsub(" ", "_", situations[i]), ".pdf"), plots[[i]], width=6, height=4.5)
#print(plots[[i]])
}
View(df)
